// Generated by js_of_ocaml 4.0.0+git-9a8f876
(function(Object)
   {typeof globalThis
    !==
    "object"
    &&
    (this
      ?get()
      :(Object.defineProperty
         (Object.prototype,"_T_",{configurable:true,get:get}),
        _T_));
    function get()
     {var global=this || self;
      global.globalThis = global;
      delete Object.prototype._T_}}
  (Object));
(function(globalThis)
   {"use strict";
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_convert_bytes_to_array(s)
     {var a=new Uint8Array(s.l),b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {s.t & 6 && caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new Float32Array(1);
      float32a[0] = x;
      var int32a=new Int32Array(float32a.buffer);
      return int32a[0] | 0}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var view;
      switch(kind)
       {case 0:view = Float32Array;break;
        case 1:view = Float64Array;break;
        case 2:view = Int8Array;break;
        case 3:view = Uint8Array;break;
        case 4:view = Int16Array;break;
        case 5:view = Uint16Array;break;
        case 6:view = Int32Array;break;
        case 7:view = Int32Array;break;
        case 8:view = Int32Array;break;
        case 9:view = Int32Array;break;
        case 10:view = Float32Array;break;
        case 11:view = Float64Array;break;
        case 12:view = Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new Int32Array(1);
      int32a[0] = x;
      var float32a=new Float32Array(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {if(! caml_global_data.Failure)
       caml_global_data.Failure = [248,caml_string_of_jsbytes("Failure"),- 3];
      caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[5] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += f.uppercase?"0X":"0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function fs_node_supported()
     {return typeof globalThis.process
             !==
             "undefined"
             &&
             typeof globalThis.process.versions
             !==
             "undefined"
             &&
             typeof globalThis.process.versions.node
             !==
             "undefined"}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return fs_node_supported()
              &&
              globalThis.process
              &&
              globalThis.process.platform
              ?globalThis.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
     var caml_current_dir=globalThis.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_bytes_of_array(a)
     {if(! (a instanceof Uint8Array))a = new Uint8Array(a);
      return new MlBytes(4,a,a.length)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {caml_raise_sys_error(name + ": No such file or directory")}
    function caml_uint8_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.constructor = MlFakeFile;
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(caml_bytes_of_array(buf),pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)len = clen - offset;
      if(len)
       {var data=caml_create_bytes(len | 0);
        caml_blit_bytes(this.data,offset,data,0,len);
        buf.set(caml_uint8_array_of_bytes(data),pos)}
      return len};
    function MlFakeFd(name,file,flags)
     {this.file = file;this.name = name;this.flags = flags}
    MlFakeFd.prototype.err_closed
    =
    function()
     {caml_raise_sys_error(this.name + ": file descriptor already closed")};
    MlFakeFd.prototype.length
    =
    function(){if(this.file)return this.file.length();this.err_closed()};
    MlFakeFd.prototype.write
    =
    function(offset,buf,pos,len)
     {if(this.file)return this.file.write(offset,buf,pos,len);
      this.err_closed()};
    MlFakeFd.prototype.read
    =
    function(offset,buf,pos,len)
     {if(this.file)return this.file.read(offset,buf,pos,len);
      this.err_closed()};
    MlFakeFd.prototype.close = function(){this.file = undefined};
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {var file;
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        file = this.content[name];
        if(f.truncate)file.truncate()}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         file = this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name));
      return new MlFakeFd(this.nm(name),file,f)};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_uint8_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function MlNodeFd(fd,flags)
     {this.fs = require("fs");this.fd = fd;this.flags = flags}
    MlNodeFd.prototype = new MlFile();
    MlNodeFd.prototype.constructor = MlNodeFd;
    MlNodeFd.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFd.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFd.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {try
       {if(this.flags.isCharacterDevice)
         this.fs.writeSync(this.fd,buf,buf_offset,len);
        else
         this.fs.writeSync(this.fd,buf,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFd.prototype.read
    =
    function(offset,a,buf_offset,len)
     {try
       {if(this.flags.isCharacterDevice)
         var read=this.fs.readSync(this.fd,a,buf_offset,len);
        else
         var read=this.fs.readSync(this.fd,a,buf_offset,len,offset);
        return read}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFd.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd);return 0}
      catch(err){caml_raise_sys_error(err.toString())}};
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var
         fd=this.fs.openSync(this.nm(name),res),
         isCharacterDevice=
          this.fs.lstatSync(this.nm(name)).isCharacterDevice();
        f.isCharacterDevice = isCharacterDevice;
        return new MlNodeFd(fd,f)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root"),
     jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res && fs_node_supported())
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function jsoo_create_file(name,content)
     {var
       name=caml_string_of_jsbytes(name),
       content=caml_string_of_jsbytes(content);
      return caml_create_file(name,content)}
    function caml_fs_init()
     {var tmp=globalThis.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        jsoo_create_file(tmp[i].name,tmp[i].content);
      globalThis.jsoo_create_file = jsoo_create_file;
      globalThis.caml_fs_tmp = [];
      return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_get_console()
     {var
       c=console,
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_js_on_ie()
     {var ua=globalThis.navigator?globalThis.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_debug_info_status(){return 0}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer_curr == 0)return 0;
      if(chan.output)
       chan.output(caml_subarray_to_jsbytes(chan.buffer,0,chan.buffer_curr));
      else
       chan.file.write(chan.offset,chan.buffer,0,chan.buffer_curr);
      chan.offset += chan.buffer_curr;
      chan.buffer_curr = 0;
      return 0}
    var caml_sys_fds=new Array(3);
    function MlFakeFd_out(fd,flags)
     {MlFakeFile.call(this,caml_create_bytes(0));
      this.log = function(s){return 0};
      if(fd == 1 && typeof console.log == "function")
       this.log = console.log;
      else
       if(fd == 2 && typeof console.error == "function")
        this.log = console.error;
       else
        if(typeof console.log == "function")this.log = console.log;
      this.flags = flags}
    MlFakeFd_out.prototype.length = function(){return 0};
    MlFakeFd_out.prototype.write
    =
    function(offset,buf,pos,len)
     {if(this.log)
       {if
         (len
          >
          0
          &&
          pos
          >=
          0
          &&
          pos
          +
          len
          <=
          buf.length
          &&
          buf[pos + len - 1]
          ==
          10)
         len--;
        var src=caml_create_bytes(len);
        caml_blit_bytes(caml_bytes_of_array(buf),pos,src,0,len);
        this.log(src.toUtf16());
        return 0}
      caml_raise_sys_error(this.fd + ": file descriptor already closed")};
    MlFakeFd_out.prototype.read
    =
    function(offset,buf,pos,len)
     {caml_raise_sys_error(this.fd + ": file descriptor is write only")};
    MlFakeFd_out.prototype.close = function(){this.log = undefined};
    function caml_sys_open_internal(file,idx)
     {if(idx == undefined)idx = caml_sys_fds.length;
      caml_sys_fds[idx] = file;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var root=resolve_fs_device(name),file=root.device.open(root.rest,f);
      return caml_sys_open_internal(file,undefined)}
    (function()
       {function file(fd,flags)
         {if(fs_node_supported())
           {if(flags.name)
             try
              {var fs=require("fs"),fd2=fs.openSync(flags.name,"rs");
               return new MlNodeFd(fd2,flags)}
             catch(e){}
            return new MlNodeFd(fd,flags)}
          else
           return new MlFakeFd_out(fd,flags)}
        caml_sys_open_internal
         (file(0,{rdonly:1,altname:"/dev/stdin",isCharacterDevice:true}),0);
        caml_sys_open_internal
         (file(1,{buffered:2,wronly:1,isCharacterDevice:true}),1);
        caml_sys_open_internal
         (file(2,{buffered:2,wronly:1,isCharacterDevice:true}),2)}
      ());
    function caml_ml_open_descriptor_in(fd)
     {var file=caml_sys_fds[fd];
      if(file.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       refill=null,
       channel=
        {file:file,
         offset:file.flags.append?file.length():0,
         fd:fd,
         opened:true,
         out:false,
         buffer_curr:0,
         buffer_max:0,
         buffer:new Uint8Array(65536),
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var file=caml_sys_fds[fd];
      if(file.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       buffered=file.flags.buffered !== undefined?file.flags.buffered:1,
       channel=
        {file:file,
         offset:file.flags.append?file.length():0,
         fd:fd,
         opened:true,
         out:true,
         buffer_curr:0,
         buffer:new Uint8Array(65536),
         buffered:buffered};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var buffer=caml_uint8_array_of_bytes(buffer);
      buffer = buffer.subarray(offset,offset + len);
      if(chan.buffer_curr + buffer.length > chan.buffer.length)
       {var b=new Uint8Array(chan.buffer_curr + buffer.length);
        b.set(chan.buffer);
        chan.buffer = b}
      switch(chan.buffered)
       {case 0:
         chan.buffer.set(buffer,chan.buffer_curr);
         chan.buffer_curr += buffer.length;
         caml_ml_flush(chanid);
         break;
        case 1:
         chan.buffer.set(buffer,chan.buffer_curr);
         chan.buffer_curr += buffer.length;
         if(chan.buffer_curr >= chan.buffer.length)caml_ml_flush(chanid);
         break;
        case 2:
         var id=buffer.lastIndexOf(10);
         if(id < 0)
          {chan.buffer.set(buffer,chan.buffer_curr);
           chan.buffer_curr += buffer.length;
           if(chan.buffer_curr >= chan.buffer.length)caml_ml_flush(chanid)}
         else
          {chan.buffer.set(buffer.subarray(0,id + 1),chan.buffer_curr);
           chan.buffer_curr += id + 1;
           caml_ml_flush(chanid);
           chan.buffer.set(buffer.subarray(id + 1),chan.buffer_curr);
           chan.buffer_curr += buffer.length - id - 1}
         break
        }
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_read_file_content(name)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=caml_create_bytes(len);
        file.read(0,buf,0,len);
        return caml_string_of_bytes(buf)}
      caml_raise_no_such_file(caml_jsbytes_of_string(name))}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && globalThis.toplevelReloc)
       n = globalThis.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_exit(code)
     {if(globalThis.quit)globalThis.quit(code);
      if(globalThis.process && globalThis.process.exit)
       globalThis.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (globalThis.RangeError
        &&
        e instanceof globalThis.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (globalThis.InternalError
        &&
        e instanceof globalThis.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof globalThis.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_xmlhttprequest_create(unit)
     {if(typeof globalThis.XMLHttpRequest !== "undefined")
       try {return new (globalThis.XMLHttpRequest)()}catch(e){}
      if(typeof globalThis.activeXObject !== "undefined")
       {try
         {return new (globalThis.activeXObject)("Msxml2.XMLHTTP")}
        catch(e){}
        try
         {return new (globalThis.activeXObject)("Msxml3.XMLHTTP")}
        catch(e){}
        try
         {return new (globalThis.activeXObject)("Microsoft.XMLHTTP")}
        catch(e){}}
      caml_failwith("Cannot create a XMLHttpRequest")}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          console.error("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_setup_uncaught_exception_handler()
     {var process=globalThis.process;
      if(process && process.on)
       process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);process.exit(2)});
      else
       if(globalThis.addEventListener)
        globalThis.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    jsoo_create_file
     ("/static/monkey.model",
      "# Blender v2.61 (sub 0) OBJ File: ''\n# www.blender.org\no Monkey\nv 0.436361 0.667417 -0.179002\nv -0.438639 0.667417 -0.179002\nv 0.498861 0.589292 -0.108690\nv -0.501139 0.589292 -0.108690\nv 0.545736 0.479917 -0.069627\nv -0.548014 0.479917 -0.069627\nv 0.350423 0.518980 0.008498\nv -0.352702 0.518980 0.008498\nv 0.350423 0.620542 -0.046190\nv -0.352702 0.620542 -0.046190\nv 0.350423 0.683042 -0.147752\nv -0.352702 0.683042 -0.147752\nv 0.272298 0.698667 -0.179002\nv -0.274577 0.698667 -0.179002\nv 0.201986 0.643980 -0.108690\nv -0.204264 0.643980 -0.108690\nv 0.155111 0.550230 -0.069627\nv -0.157389 0.550230 -0.069627\nv 0.076986 0.558042 -0.257127\nv -0.079264 0.558042 -0.257127\nv 0.139486 0.643980 -0.257127\nv -0.141764 0.643980 -0.257127\nv 0.241048 0.698667 -0.257127\nv -0.243327 0.698667 -0.257127\nv 0.272298 0.698667 -0.343065\nv -0.274577 0.698667 -0.343065\nv 0.201986 0.643980 -0.405565\nv -0.204264 0.643980 -0.405565\nv 0.155111 0.550230 -0.452440\nv -0.157389 0.550230 -0.452440\nv 0.350423 0.518980 -0.530565\nv -0.352702 0.518980 -0.530565\nv 0.350423 0.620542 -0.468065\nv -0.352702 0.620542 -0.468065\nv 0.350423 0.683042 -0.374315\nv -0.352702 0.683042 -0.374315\nv 0.436361 0.667417 -0.343065\nv -0.438639 0.667417 -0.343065\nv 0.498861 0.589292 -0.405565\nv -0.501139 0.589292 -0.405565\nv 0.545736 0.479917 -0.452440\nv -0.548014 0.479917 -0.452440\nv 0.623861 0.464292 -0.257127\nv -0.626139 0.464292 -0.257127\nv 0.561361 0.573667 -0.257127\nv -0.563639 0.573667 -0.257127\nv 0.467611 0.659605 -0.257127\nv -0.469889 0.659605 -0.257127\nv 0.475423 0.675230 -0.257127\nv -0.477702 0.675230 -0.257127\nv 0.444173 0.683042 -0.350877\nv -0.446452 0.683042 -0.350877\nv 0.350423 0.706480 -0.389940\nv -0.352702 0.706480 -0.389940\nv 0.264486 0.722105 -0.350877\nv -0.266764 0.722105 -0.350877\nv 0.225423 0.722105 -0.257127\nv -0.227702 0.722105 -0.257127\nv 0.264486 0.722105 -0.171190\nv -0.266764 0.722105 -0.171190\nv 0.350423 0.729917 -0.257127\nv -0.352702 0.729917 -0.257127\nv 0.350423 0.706480 -0.132127\nv -0.352702 0.706480 -0.132127\nv 0.444173 0.683042 -0.171190\nv -0.446452 0.683042 -0.171190\nv -0.001139 0.643980 -0.444627\nv -0.001139 0.722105 -0.366502\nv -0.001139 0.636167 0.664748\nv -0.001139 0.683042 0.305373\nv -0.001139 0.698667 0.172560\nv -0.001139 0.620542 0.758498\nv -0.001139 0.503355 -0.421190\nv -0.001139 0.472105 -0.585252\nv -0.001139 -0.645083 -0.913377\nv -0.001139 -0.949770 -0.577440\nv -0.001139 -0.926333 -0.085252\nv -0.001139 -0.449770 0.367873\nv 0.201986 0.464292 0.172560\nv -0.204264 0.464292 0.172560\nv 0.311361 0.472105 0.422560\nv -0.313639 0.472105 0.422560\nv 0.350423 0.472105 0.680373\nv -0.352702 0.472105 0.680373\nv 0.366048 0.433042 0.875685\nv -0.368327 0.433042 0.875685\nv 0.326986 0.425230 0.930373\nv -0.329264 0.425230 0.930373\nv 0.178548 0.456480 0.953810\nv -0.180827 0.456480 0.953810\nv -0.001139 0.479917 0.969435\nv 0.436361 0.433042 0.125685\nv -0.438639 0.433042 0.125685\nv 0.631673 0.440855 0.024123\nv -0.633952 0.440855 0.024123\nv 0.826986 0.347105 -0.163377\nv -0.829264 0.347105 -0.163377\nv 0.858236 0.495542 -0.444627\nv -0.860514 0.495542 -0.444627\nv 0.709798 0.526792 -0.499315\nv -0.712077 0.526792 -0.499315\nv 0.491048 0.589292 -0.616502\nv -0.493327 0.589292 -0.616502\nv 0.319173 0.636167 -0.772752\nv -0.321452 0.636167 -0.772752\nv 0.155111 0.659605 -0.733690\nv -0.157389 0.659605 -0.733690\nv 0.061361 0.651792 -0.507127\nv -0.063639 0.651792 -0.507127\nv 0.162923 0.675230 -0.429002\nv -0.165202 0.675230 -0.429002\nv 0.123861 0.667417 -0.319627\nv -0.126139 0.667417 -0.319627\nv 0.201986 0.643980 -0.108690\nv -0.204264 0.643980 -0.108690\nv 0.373861 0.604917 -0.030565\nv -0.376139 0.604917 -0.030565\nv 0.491048 0.573667 -0.077440\nv -0.493327 0.573667 -0.077440\nv 0.623861 0.550230 -0.202440\nv -0.626139 0.550230 -0.202440\nv 0.639486 0.550230 -0.311815\nv -0.641764 0.550230 -0.311815\nv 0.600423 0.565855 -0.389940\nv -0.602702 0.565855 -0.389940\nv 0.428548 0.620542 -0.452440\nv -0.430827 0.620542 -0.452440\nv 0.248861 0.659605 -0.483690\nv -0.251139 0.659605 -0.483690\nv -0.001139 0.636167 0.750685\nv 0.108236 0.636167 0.703810\nv -0.110514 0.636167 0.703810\nv 0.116048 0.612730 0.820998\nv -0.118327 0.612730 0.820998\nv 0.061361 0.597105 0.867873\nv -0.063639 0.597105 0.867873\nv -0.001139 0.589292 0.875685\nv -0.001139 0.651792 0.180373\nv -0.001139 0.643980 0.125685\nv 0.100423 0.643980 0.133498\nv -0.102702 0.643980 0.133498\nv 0.123861 0.651792 0.211623\nv -0.126139 0.651792 0.211623\nv 0.084798 0.643980 0.274123\nv -0.087077 0.643980 0.274123\nv 0.397298 0.573667 0.031935\nv -0.399577 0.573667 0.031935\nv 0.616048 0.526792 -0.069627\nv -0.618327 0.526792 -0.069627\nv 0.725423 0.503355 -0.218065\nv -0.727702 0.503355 -0.218065\nv 0.741048 0.558042 -0.389940\nv -0.743327 0.558042 -0.389940\nv 0.686361 0.628355 -0.429002\nv -0.688639 0.628355 -0.429002\nv 0.436361 0.698667 -0.561815\nv -0.438639 0.698667 -0.561815\nv 0.311361 0.737730 -0.655565\nv -0.313639 0.737730 -0.655565\nv 0.201986 0.753355 -0.632127\nv -0.204264 0.753355 -0.632127\nv 0.100423 0.745542 -0.444627\nv -0.102702 0.745542 -0.444627\nv 0.123861 0.714292 0.086623\nv -0.126139 0.714292 0.086623\nv 0.209798 0.612730 0.430373\nv -0.212077 0.612730 0.430373\nv 0.248861 0.589292 0.688185\nv -0.251139 0.589292 0.688185\nv 0.264486 0.565855 0.805373\nv -0.266764 0.565855 0.805373\nv 0.233236 0.534605 0.899123\nv -0.235514 0.534605 0.899123\nv 0.162923 0.534605 0.914748\nv -0.165202 0.534605 0.914748\nv -0.001139 0.542417 0.930373\nv -0.001139 0.628355 -0.061815\nv -0.001139 0.667417 -0.225877\nv 0.326986 0.643980 -0.491502\nv -0.329264 0.643980 -0.491502\nv 0.162923 0.651792 -0.155565\nv -0.165202 0.651792 -0.155565\nv 0.131673 0.659605 -0.225877\nv -0.133952 0.659605 -0.225877\nv 0.116048 0.636167 0.672560\nv -0.118327 0.636167 0.672560\nv 0.076986 0.651792 0.430373\nv -0.079264 0.651792 0.430373\nv -0.001139 0.651792 0.430373\nv -0.001139 0.643980 0.313185\nv 0.092611 0.683042 0.258498\nv -0.094889 0.683042 0.258498\nv 0.131673 0.698667 0.211623\nv -0.133952 0.698667 0.211623\nv 0.108236 0.683042 0.117873\nv -0.110514 0.683042 0.117873\nv 0.037923 0.683042 0.110060\nv -0.040202 0.683042 0.110060\nv -0.001139 0.729917 0.188185\nv 0.045736 0.714292 0.133498\nv -0.048014 0.714292 0.133498\nv 0.092611 0.714292 0.141310\nv -0.094889 0.714292 0.141310\nv 0.108236 0.729917 0.211623\nv -0.110514 0.729917 0.211623\nv 0.076986 0.706480 0.235060\nv -0.079264 0.706480 0.235060\nv -0.001139 0.706480 0.274123\nv 0.256673 0.456480 0.297560\nv -0.258952 0.456480 0.297560\nv 0.162923 0.612730 0.227248\nv -0.165202 0.612730 0.227248\nv 0.178548 0.612730 0.297560\nv -0.180827 0.612730 0.297560\nv 0.233236 0.456480 0.235060\nv -0.235514 0.456480 0.235060\nv -0.001139 0.589292 0.860060\nv 0.045736 0.589292 0.852248\nv -0.048014 0.589292 0.852248\nv 0.092611 0.612730 0.805373\nv -0.094889 0.612730 0.805373\nv 0.092611 0.628355 0.727248\nv -0.094889 0.628355 0.727248\nv -0.001139 0.558042 0.766310\nv 0.092611 0.565855 0.735060\nv -0.094889 0.565855 0.735060\nv 0.092611 0.542417 0.797560\nv -0.094889 0.542417 0.797560\nv 0.045736 0.534605 0.836623\nv -0.048014 0.534605 0.836623\nv -0.001139 0.534605 0.844435\nv 0.170736 0.683042 -0.233690\nv -0.173014 0.683042 -0.233690\nv 0.186361 0.675230 -0.171190\nv -0.188639 0.675230 -0.171190\nv 0.334798 0.659605 -0.444627\nv -0.337077 0.659605 -0.444627\nv 0.272298 0.675230 -0.436815\nv -0.274577 0.675230 -0.436815\nv 0.420736 0.675230 -0.413377\nv -0.423014 0.675230 -0.413377\nv 0.561361 0.597105 -0.366502\nv -0.563639 0.597105 -0.366502\nv 0.584798 0.589292 -0.304002\nv -0.587077 0.589292 -0.304002\nv 0.576986 0.581480 -0.210252\nv -0.579264 0.581480 -0.210252\nv 0.475423 0.620542 -0.116502\nv -0.477702 0.620542 -0.116502\nv 0.373861 0.643980 -0.077440\nv -0.376139 0.643980 -0.077440\nv 0.225423 0.683042 -0.124315\nv -0.227702 0.683042 -0.124315\nv 0.178548 0.683042 -0.311815\nv -0.180827 0.683042 -0.311815\nv 0.209798 0.683042 -0.389940\nv -0.212077 0.683042 -0.389940\nv 0.233236 0.659605 -0.374315\nv -0.235514 0.659605 -0.374315\nv 0.194173 0.659605 -0.311815\nv -0.196452 0.659605 -0.311815\nv 0.241048 0.659605 -0.139940\nv -0.243327 0.659605 -0.139940\nv 0.373861 0.628355 -0.100877\nv -0.376139 0.628355 -0.100877\nv 0.459798 0.604917 -0.132127\nv -0.462077 0.604917 -0.132127\nv 0.545736 0.573667 -0.225877\nv -0.548014 0.573667 -0.225877\nv 0.553548 0.573667 -0.296190\nv -0.555827 0.573667 -0.296190\nv 0.530111 0.581480 -0.350877\nv -0.532389 0.581480 -0.350877\nv 0.412923 0.651792 -0.405565\nv -0.415202 0.651792 -0.405565\nv 0.280111 0.667417 -0.413377\nv -0.282389 0.667417 -0.413377\nv 0.334798 0.651792 -0.421190\nv -0.337077 0.651792 -0.421190\nv 0.201986 0.651792 -0.186815\nv -0.204264 0.651792 -0.186815\nv 0.194173 0.651792 -0.241502\nv -0.196452 0.651792 -0.241502\nv 0.108236 0.511167 -0.475877\nv -0.110514 0.511167 -0.475877\nv 0.194173 0.518980 -0.679002\nv -0.196452 0.518980 -0.679002\nv 0.334798 0.495542 -0.702440\nv -0.337077 0.495542 -0.702440\nv 0.483236 0.456480 -0.569627\nv -0.485514 0.456480 -0.569627\nv 0.678548 0.393980 -0.468065\nv -0.680827 0.393980 -0.468065\nv 0.795736 0.362730 -0.421190\nv -0.798014 0.362730 -0.421190\nv 0.772298 0.276792 -0.179002\nv -0.774577 0.276792 -0.179002\nv 0.600423 0.315855 -0.014940\nv -0.602702 0.315855 -0.014940\nv 0.436361 0.370542 0.078810\nv -0.438639 0.370542 0.078810\nv -0.001139 0.190855 -0.913377\nv -0.001139 -0.176333 -0.999315\nv -0.001139 -0.770083 0.180373\nv -0.001139 0.089292 0.445998\nv -0.001139 0.362730 0.961623\nv -0.001139 0.245542 0.789748\nv -0.001139 0.222105 0.555373\nv -0.001139 0.183042 0.469435\nv 0.850423 -0.043520 -0.249315\nv -0.852702 -0.043520 -0.249315\nv 0.858236 -0.145083 -0.335252\nv -0.860514 -0.145083 -0.335252\nv 0.772298 -0.535708 -0.280565\nv -0.774577 -0.535708 -0.280565\nv 0.459798 -0.801333 -0.452440\nv -0.462077 -0.801333 -0.452440\nv 0.733236 -0.027895 0.031935\nv -0.735514 -0.027895 0.031935\nv 0.592611 -0.262270 0.110060\nv -0.594889 -0.262270 0.110060\nv 0.639486 -0.527895 -0.007127\nv -0.641764 -0.527895 -0.007127\nv 0.334798 -0.762270 -0.069627\nv -0.337077 -0.762270 -0.069627\nv 0.233236 0.308042 0.336623\nv -0.235514 0.308042 0.336623\nv 0.178548 0.159605 0.399123\nv -0.180827 0.159605 0.399123\nv 0.287923 0.284605 0.695998\nv -0.290202 0.284605 0.695998\nv 0.248861 0.292417 0.485060\nv -0.251139 0.292417 0.485060\nv 0.326986 0.300230 0.899123\nv -0.329264 0.300230 0.899123\nv 0.139486 0.268980 0.742873\nv -0.141764 0.268980 0.742873\nv 0.123861 0.261167 0.524123\nv -0.126139 0.261167 0.524123\nv 0.162923 0.339292 0.930373\nv -0.165202 0.339292 0.930373\nv 0.217611 0.331480 0.266310\nv -0.219889 0.331480 0.266310\nv 0.209798 0.370542 0.211623\nv -0.212077 0.370542 0.211623\nv 0.201986 0.401792 0.156935\nv -0.204264 0.401792 0.156935\nv 0.209798 0.065855 0.375685\nv -0.212077 0.065855 0.375685\nv 0.295736 -0.363833 0.297560\nv -0.298014 -0.363833 0.297560\nv 0.342611 -0.637270 0.133498\nv -0.344889 -0.637270 0.133498\nv 0.451986 -0.481020 -0.882127\nv -0.454264 -0.481020 -0.882127\nv 0.451986 -0.168520 -0.944627\nv -0.454264 -0.168520 -0.944627\nv 0.451986 0.136167 -0.866502\nv -0.454264 0.136167 -0.866502\nv 0.459798 0.331480 -0.538377\nv -0.462077 0.331480 -0.538377\nv 0.725423 0.237730 -0.421190\nv -0.727702 0.237730 -0.421190\nv 0.631673 0.183042 -0.468065\nv -0.633952 0.183042 -0.468065\nv 0.639486 -0.043520 -0.718065\nv -0.641764 -0.043520 -0.718065\nv 0.795736 0.026792 -0.577440\nv -0.798014 0.026792 -0.577440\nv 0.795736 -0.215395 -0.632127\nv -0.798014 -0.215395 -0.632127\nv 0.639486 -0.293520 -0.764940\nv -0.641764 -0.293520 -0.764940\nv 0.639486 -0.543520 -0.694627\nv -0.641764 -0.543520 -0.694627\nv 0.795736 -0.457583 -0.554002\nv -0.798014 -0.457583 -0.554002\nv 0.616048 -0.684145 -0.343065\nv -0.618327 -0.684145 -0.343065\nv 0.483236 -0.645083 -0.038377\nv -0.485514 -0.645083 -0.038377\nv 0.819173 -0.301333 -0.343065\nv -0.821452 -0.301333 -0.343065\nv 0.405111 0.050230 0.156935\nv -0.407389 0.050230 0.156935\nv 0.428548 -0.309145 0.180373\nv -0.430827 -0.309145 0.180373\nv 0.889486 -0.332583 -0.421190\nv -0.891764 -0.332583 -0.421190\nv 0.772298 -0.223208 0.125685\nv -0.774577 -0.223208 0.125685\nv 1.037923 -0.426333 0.086623\nv -1.040202 -0.426333 0.086623\nv 1.280111 -0.527895 -0.069627\nv -1.282389 -0.527895 -0.069627\nv 1.350423 -0.520083 -0.335252\nv -1.352702 -0.520083 -0.335252\nv 1.233236 -0.520083 -0.522752\nv -1.235514 -0.520083 -0.522752\nv 1.022298 -0.410708 -0.491502\nv -1.024577 -0.410708 -0.491502\nv 1.014486 -0.387270 -0.429002\nv -1.016764 -0.387270 -0.429002\nv 1.186361 -0.488833 -0.452440\nv -1.188639 -0.488833 -0.452440\nv 1.264486 -0.504458 -0.304002\nv -1.266764 -0.504458 -0.304002\nv 1.209798 -0.504458 -0.093065\nv -1.212077 -0.504458 -0.093065\nv 1.030111 -0.402895 0.024123\nv -1.032389 -0.402895 0.024123\nv 0.826986 -0.231020 0.055373\nv -0.829264 -0.231020 0.055373\nv 0.920736 -0.316958 -0.374315\nv -0.923014 -0.316958 -0.374315\nv 0.944173 -0.387270 -0.319627\nv -0.946452 -0.387270 -0.319627\nv 0.881673 -0.309145 0.008498\nv -0.883952 -0.309145 0.008498\nv 1.037923 -0.465395 -0.014940\nv -1.040202 -0.465395 -0.014940\nv 1.186361 -0.543520 -0.108690\nv -1.188639 -0.543520 -0.108690\nv 1.233236 -0.543520 -0.264940\nv -1.235514 -0.543520 -0.264940\nv 1.170736 -0.535708 -0.374315\nv -1.173014 -0.535708 -0.374315\nv 1.022298 -0.457583 -0.358690\nv -1.024577 -0.457583 -0.358690\nv 0.842611 -0.309145 -0.304002\nv -0.844889 -0.309145 -0.304002\nv 0.834798 -0.371645 -0.186815\nv -0.837077 -0.371645 -0.186815\nv 0.756673 -0.371645 -0.108690\nv -0.758952 -0.371645 -0.108690\nv 0.819173 -0.371645 -0.100877\nv -0.821452 -0.371645 -0.100877\nv 0.842611 -0.371645 -0.030565\nv -0.844889 -0.371645 -0.030565\nv 0.811361 -0.371645 0.000685\nv -0.813639 -0.371645 0.000685\nv 0.725423 -0.168520 -0.014940\nv -0.727702 -0.168520 -0.014940\nv 0.717611 -0.270083 0.008498\nv -0.719889 -0.270083 0.008498\nv 0.717611 -0.285708 -0.054002\nv -0.719889 -0.285708 -0.054002\nv 0.795736 -0.309145 -0.218065\nv -0.798014 -0.309145 -0.218065\nv 0.889486 -0.363833 -0.257127\nv -0.891764 -0.363833 -0.257127\nv 0.889486 -0.418520 -0.249315\nv -0.891764 -0.418520 -0.249315\nv 0.811361 -0.418520 0.000685\nv -0.813639 -0.418520 0.000685\nv 0.850423 -0.418520 -0.030565\nv -0.852702 -0.418520 -0.030565\nv 0.826986 -0.418520 -0.093065\nv -0.829264 -0.418520 -0.093065\nv 0.764486 -0.418520 -0.108690\nv -0.766764 -0.418520 -0.108690\nv 0.842611 -0.418520 -0.186815\nv -0.844889 -0.418520 -0.186815\nv 1.037923 -0.512270 -0.343065\nv -1.040202 -0.512270 -0.343065\nv 1.186361 -0.582583 -0.358690\nv -1.188639 -0.582583 -0.358690\nv 1.256673 -0.590395 -0.257127\nv -1.258952 -0.590395 -0.257127\nv 1.209798 -0.582583 -0.100877\nv -1.212077 -0.582583 -0.100877\nv 1.045736 -0.520083 -0.014940\nv -1.048014 -0.520083 -0.014940\nv 0.881673 -0.363833 0.000685\nv -0.883952 -0.363833 0.000685\nv 0.951986 -0.441958 -0.304002\nv -0.954264 -0.441958 -0.304002\nv 0.889486 -0.426333 -0.124315\nv -0.891764 -0.426333 -0.124315\nv 0.936361 -0.434145 -0.077440\nv -0.938639 -0.434145 -0.077440\nv 0.998861 -0.465395 -0.139940\nv -1.001139 -0.465395 -0.139940\nv 0.959798 -0.449770 -0.186815\nv -0.962077 -0.449770 -0.186815\nv 1.014486 -0.473208 -0.249315\nv -1.016764 -0.473208 -0.249315\nv 1.053548 -0.481020 -0.202440\nv -1.055827 -0.481020 -0.202440\nv 1.108236 -0.488833 -0.225877\nv -1.110514 -0.488833 -0.225877\nv 1.084798 -0.488833 -0.288377\nv -1.087077 -0.488833 -0.288377\nv 1.022298 -0.582583 -0.452440\nv -1.024577 -0.582583 -0.452440\nv 1.248861 -0.645083 -0.483690\nv -1.251139 -0.645083 -0.483690\nv 1.366048 -0.598208 -0.311815\nv -1.368327 -0.598208 -0.311815\nv 1.311361 -0.629458 -0.069627\nv -1.313639 -0.629458 -0.069627\nv 1.037923 -0.590395 0.070998\nv -1.040202 -0.590395 0.070998\nv 0.787923 -0.426333 0.110060\nv -0.790202 -0.426333 0.110060\nv 0.858236 -0.481020 -0.397752\nv -0.860514 -0.481020 -0.397752\nvn 0.664993 0.719363 0.200752\nvn -0.664993 0.719363 0.200752\nvn 0.829427 0.468924 0.303581\nvn -0.829427 0.468924 0.303581\nvn 0.415548 0.444931 0.793320\nvn -0.415548 0.444931 0.793320\nvn 0.359950 0.781960 0.508895\nvn -0.359950 0.781960 0.508895\nvn -0.078666 0.838353 0.539423\nvn 0.078666 0.838353 0.539423\nvn -0.269627 0.468532 0.841296\nvn 0.269627 0.468532 0.841296\nvn -0.770656 0.541966 0.335204\nvn 0.770656 0.541966 0.335204\nvn -0.468941 0.861650 0.194045\nvn 0.468941 0.861650 0.194045\nvn -0.476731 0.858116 -0.190693\nvn 0.476731 0.858116 -0.190693\nvn -0.767202 0.552142 -0.326404\nvn 0.767202 0.552142 -0.326404\nvn -0.251927 0.518169 -0.817333\nvn 0.251927 0.518169 -0.817333\nvn -0.094933 0.816423 -0.569597\nvn 0.094933 0.816423 -0.569597\nvn 0.366742 0.759680 -0.537015\nvn -0.366742 0.759680 -0.537015\nvn 0.414055 0.489830 -0.767219\nvn -0.414055 0.489830 -0.767219\nvn 0.827747 0.477141 -0.295247\nvn -0.827747 0.477141 -0.295247\nvn 0.671345 0.714459 -0.197092\nvn -0.671345 0.714459 -0.197092\nvn 0.811107 -0.486664 -0.324443\nvn -0.811107 -0.486664 -0.324443\nvn 0.205152 -0.533396 -0.820610\nvn -0.205152 -0.533396 -0.820610\nvn -0.422314 -0.460706 -0.780641\nvn 0.422314 -0.460706 -0.780641\nvn -0.824061 -0.465773 -0.322458\nvn 0.824061 -0.465773 -0.322458\nvn -0.813733 -0.464991 0.348743\nvn 0.813733 -0.464991 0.348743\nvn -0.422314 -0.460706 0.780641\nvn 0.422314 -0.460706 0.780641\nvn 0.205152 -0.533396 0.820610\nvn -0.205152 -0.533396 0.820610\nvn 0.799477 -0.487486 0.350990\nvn -0.799477 -0.487486 0.350990\nvn 0.400039 0.914375 0.062344\nvn -0.400039 0.914375 0.062344\nvn 0.306938 0.935429 0.175393\nvn -0.306938 0.935429 0.175393\nvn 0.094512 0.978473 0.183464\nvn -0.094512 0.978473 0.183464\nvn -0.062353 0.997652 0.028342\nvn 0.062353 0.997652 0.028342\nvn -0.062357 0.997716 -0.025982\nvn 0.062357 0.997716 -0.025982\nvn 0.099561 0.979891 -0.172922\nvn -0.099561 0.979891 -0.172922\nvn 0.303571 0.938310 -0.165584\nvn -0.303571 0.938310 -0.165584\nvn 0.400163 0.914659 -0.057166\nvn -0.400163 0.914659 -0.057166\nvn 0.123091 0.492366 0.861641\nvn -0.123091 0.492366 0.861641\nvn 0.218986 0.452010 0.864715\nvn -0.218986 0.452010 0.864715\nvn 0.590198 0.666788 0.455038\nvn -0.590198 0.666788 0.455038\nvn 0.768894 0.637372 0.050585\nvn -0.768894 0.637372 0.050585\nvn 0.779649 0.619721 -0.089960\nvn -0.779649 0.619721 -0.089960\nvn 0.324141 0.473874 0.818765\nvn -0.324141 0.473874 0.818765\nvn 0.385730 0.641707 0.662891\nvn -0.385730 0.641707 0.662891\nvn 0.689468 0.590607 0.419306\nvn -0.689468 0.590607 0.419306\nvn 0.658751 0.658751 0.363449\nvn -0.658751 0.658751 0.363449\nvn 0.546548 0.750910 -0.370702\nvn -0.546548 0.750910 -0.370702\nvn 0.506447 0.570645 -0.646433\nvn -0.506447 0.570645 -0.646433\nvn 0.609244 0.601532 -0.516701\nvn -0.609244 0.601532 -0.516701\nvn -0.044065 0.749110 -0.660979\nvn 0.044065 0.749110 -0.660979\nvn -0.724614 0.611014 -0.318742\nvn 0.724614 0.611014 -0.318742\nvn -0.588034 0.588034 -0.555366\nvn 0.588034 0.588034 -0.555366\nvn 0.536054 0.748241 0.390872\nvn -0.536054 0.748241 0.390872\nvn 0.220695 0.855193 0.468977\nvn -0.220695 0.855193 0.468977\nvn -0.079395 0.842940 0.532117\nvn 0.079395 0.842940 0.532117\nvn -0.082465 0.748963 0.657461\nvn 0.082465 0.748963 0.657461\nvn 0.045703 0.822647 0.566712\nvn -0.045703 0.822647 0.566712\nvn 0.278428 0.936532 0.213040\nvn -0.278428 0.936532 0.213040\nvn 0.381303 0.906285 0.182362\nvn -0.381303 0.906285 0.182362\nvn 0.335744 0.896916 0.287781\nvn -0.335744 0.896916 0.287781\nvn 0.376240 0.924559 -0.060276\nvn -0.376240 0.924559 -0.060276\nvn -0.135216 0.953890 -0.267974\nvn 0.135216 0.953890 -0.267974\nvn 0.396091 0.810186 0.432099\nvn -0.396091 0.810186 0.432099\nvn 0.185557 0.950977 0.247409\nvn -0.185557 0.950977 0.247409\nvn 0.009907 0.980786 0.194836\nvn -0.009907 0.980786 0.194836\nvn 0.072066 0.713795 0.696637\nvn -0.072066 0.713795 0.696637\nvn 0.186336 0.798582 0.572317\nvn -0.186336 0.798582 0.572317\nvn 0.315685 0.909388 0.270843\nvn -0.315685 0.909388 0.270843\nvn 0.306302 0.951566 0.026481\nvn -0.306302 0.951566 0.026481\nvn 0.326550 0.936111 0.130620\nvn -0.326550 0.936111 0.130620\nvn -0.013675 0.998256 -0.057434\nvn 0.013675 0.998256 -0.057434\nvn -0.002626 0.997839 0.065647\nvn 0.002626 0.997839 0.065647\nvn 0.000000 1.000000 -0.000000\nvn 0.817393 -0.044183 0.574384\nvn -0.817393 -0.044183 0.574384\nvn 0.949363 -0.214372 -0.229685\nvn -0.949363 -0.214372 -0.229685\nvn 0.082479 -0.412393 -0.907265\nvn -0.082479 -0.412393 -0.907265\nvn -0.883624 0.304698 -0.355481\nvn 0.883624 0.304698 -0.355481\nvn 0.420706 0.221827 0.879659\nvn -0.420706 0.221827 0.879659\nvn 0.287348 0.766261 0.574696\nvn -0.287348 0.766261 0.574696\nvn -0.654224 0.457957 -0.601886\nvn 0.654224 0.457957 -0.601886\nvn 0.105227 0.605054 -0.789201\nvn -0.105227 0.605054 -0.789201\nvn 0.758175 0.583212 -0.291606\nvn -0.758175 0.583212 -0.291606\nvn 0.388922 0.583383 0.713024\nvn -0.388922 0.583383 0.713024\nvn 0.046274 0.971764 -0.231372\nvn -0.046274 0.971764 -0.231372\nvn 0.033480 0.915131 0.401765\nvn -0.033480 0.915131 0.401765\nvn -0.445163 0.880854 0.161016\nvn 0.445163 0.880854 0.161016\nvn -0.218218 0.872872 0.436436\nvn 0.218218 0.872872 0.436436\nvn 0.434064 0.891591 0.129046\nvn -0.434064 0.891591 0.129046\nvn 0.300753 0.952384 -0.050125\nvn -0.300753 0.952384 -0.050125\nvn 0.812285 0.499568 -0.301039\nvn -0.812285 0.499568 -0.301039\nvn 0.875310 0.409336 -0.257444\nvn -0.875310 0.409336 -0.257444\nvn 0.938484 0.305959 -0.160113\nvn -0.938484 0.305959 -0.160113\nvn 0.223706 0.722743 0.653910\nvn -0.223706 0.722743 0.653910\nvn -0.153610 0.967743 0.199693\nvn 0.153610 0.967743 0.199693\nvn -0.273275 0.956462 0.102478\nvn 0.273275 0.956462 0.102478\nvn -0.097590 0.975900 -0.195180\nvn 0.097590 0.975900 -0.195180\nvn -0.158235 0.271260 -0.949410\nvn 0.158235 0.271260 -0.949410\nvn -0.693430 0.132784 -0.708183\nvn 0.693430 0.132784 -0.708183\nvn -1.000000 0.000000 0.000000\nvn 1.000000 0.000000 0.000000\nvn 0.305141 0.118119 0.944953\nvn -0.305141 0.118119 0.944953\nvn 0.029814 0.954056 0.298142\nvn -0.029814 0.954056 0.298142\nvn 0.135293 0.927720 0.347895\nvn -0.135293 0.927720 0.347895\nvn -0.508542 0.815786 0.275460\nvn 0.508542 0.815786 0.275460\nvn -0.384277 0.922265 0.041921\nvn 0.384277 0.922265 0.041921\nvn -0.208288 0.977353 -0.037385\nvn 0.208288 0.977353 -0.037385\nvn -0.572078 0.667424 0.476731\nvn 0.572078 0.667424 0.476731\nvn -0.136922 0.643534 0.753071\nvn 0.136922 0.643534 0.753071\nvn 0.408843 0.681405 0.607070\nvn -0.408843 0.681405 0.607070\nvn 0.574030 0.707038 0.413022\nvn -0.574030 0.707038 0.413022\nvn 0.566534 0.818328 0.096843\nvn -0.566534 0.818328 0.096843\nvn 0.570336 0.812892 -0.118000\nvn -0.570336 0.812892 -0.118000\nvn 0.482289 0.671879 -0.562117\nvn -0.482289 0.671879 -0.562117\nvn 0.260407 0.747255 -0.611390\nvn -0.260407 0.747255 -0.611390\nvn 0.163956 0.918156 -0.360704\nvn -0.163956 0.918156 -0.360704\nvn -0.017820 0.968216 -0.249479\nvn 0.017820 0.968216 -0.249479\nvn 0.327339 0.848105 0.416613\nvn -0.327339 0.848105 0.416613\nvn 0.281070 0.923516 0.260994\nvn -0.281070 0.923516 0.260994\nvn -0.254193 0.714916 0.651368\nvn 0.254193 0.714916 0.651368\nvn -0.026016 0.533323 0.845512\nvn 0.026016 0.533323 0.845512\nvn -0.351808 0.899066 0.260599\nvn 0.351808 0.899066 0.260599\nvn -0.352308 0.935819 0.011010\nvn 0.352308 0.935819 0.011010\nvn -0.131654 0.877691 -0.460788\nvn 0.131654 0.877691 -0.460788\nvn -0.034219 0.787044 -0.615947\nvn 0.034219 0.787044 -0.615947\nvn 0.360263 0.727731 -0.583625\nvn -0.360263 0.727731 -0.583625\nvn 0.498784 0.685828 -0.529958\nvn -0.498784 0.685828 -0.529958\nvn 0.666667 0.666667 0.333333\nvn -0.666667 0.666667 0.333333\nvn 0.816466 0.572745 0.073116\nvn -0.816466 0.572745 0.073116\nvn 0.784010 0.609785 -0.116150\nvn -0.784010 0.609785 -0.116150\nvn -0.530629 -0.246147 -0.811076\nvn 0.530629 -0.246147 -0.811076\nvn -0.851109 -0.372958 -0.369480\nvn 0.851109 -0.372958 -0.369480\nvn -0.244586 -0.433121 -0.867516\nvn 0.244586 -0.433121 -0.867516\nvn 0.592382 -0.303006 -0.746506\nvn -0.592382 -0.303006 -0.746506\nvn 0.368548 -0.311777 -0.875767\nvn -0.368548 -0.311777 -0.875767\nvn 0.282140 -0.287988 -0.915128\nvn -0.282140 -0.287988 -0.915128\nvn 0.856131 -0.499077 -0.134021\nvn -0.856131 -0.499077 -0.134021\nvn 0.534226 -0.437577 0.723276\nvn -0.534226 -0.437577 0.723276\nvn 0.384903 -0.436800 0.813053\nvn -0.384903 -0.436800 0.813053\nvn 0.233519 -0.780017 0.580553\nvn -0.233519 -0.780017 0.580553\nvn 0.244866 -0.967802 0.058301\nvn -0.244866 -0.967802 0.058301\nvn 0.116271 -0.883661 0.453458\nvn -0.116271 -0.883661 0.453458\nvn 0.115196 -0.138826 0.983594\nvn -0.115196 -0.138826 0.983594\nvn 0.118366 -0.225972 0.966916\nvn -0.118366 -0.225972 0.966916\nvn 0.959736 -0.280774 0.008508\nvn -0.959736 -0.280774 0.008508\nvn 0.931868 -0.324194 -0.162851\nvn -0.931868 -0.324194 -0.162851\nvn 0.162606 -0.986474 -0.020695\nvn -0.162606 -0.986474 -0.020695\nvn -0.018766 -0.975838 0.217687\nvn 0.018766 -0.975838 0.217687\nvn 0.753776 -0.588391 0.292605\nvn -0.753776 -0.588391 0.292605\nvn 0.919601 -0.367840 -0.137940\nvn -0.919601 -0.367840 -0.137940\nvn 0.929736 -0.194399 -0.312729\nvn -0.929736 -0.194399 -0.312729\nvn 0.912018 -0.232856 -0.337641\nvn -0.912018 -0.232856 -0.337641\nvn 0.940691 -0.060690 -0.333793\nvn -0.940691 -0.060690 -0.333793\nvn 0.176090 -0.440225 0.880451\nvn -0.176090 -0.440225 0.880451\nvn 0.370784 -0.799083 0.473270\nvn -0.370784 -0.799083 0.473270\nvn 0.310668 -0.466002 0.828449\nvn -0.310668 -0.466002 0.828449\nvn 0.279339 -0.128692 0.951529\nvn -0.279339 -0.128692 0.951529\nvn 0.313873 -0.180715 0.932108\nvn -0.313873 -0.180715 0.932108\nvn 0.976161 -0.060864 0.208341\nvn -0.976161 -0.060864 0.208341\nvn 0.826725 0.244727 0.506592\nvn -0.826725 0.244727 0.506592\nvn 0.344853 -0.931486 0.115800\nvn -0.344853 -0.931486 0.115800\nvn 0.120261 0.235495 -0.964406\nvn -0.120261 0.235495 -0.964406\nvn 0.127513 -0.185137 -0.974405\nvn -0.127513 -0.185137 -0.974405\nvn 0.349226 -0.724138 -0.594697\nvn -0.349226 -0.724138 -0.594697\nvn 0.415251 -0.144855 -0.898100\nvn -0.415251 -0.144855 -0.898100\nvn 0.184540 0.686258 -0.703559\nvn -0.184540 0.686258 -0.703559\nvn 0.605564 0.160824 -0.779377\nvn -0.605564 0.160824 -0.779377\nvn 0.703301 -0.205264 -0.680614\nvn -0.703301 -0.205264 -0.680614\nvn 0.667944 -0.716631 -0.200725\nvn -0.667944 -0.716631 -0.200725\nvn 0.494774 -0.752756 -0.434231\nvn -0.494774 -0.752756 -0.434231\nvn 0.642323 -0.176121 -0.745924\nvn -0.642323 -0.176121 -0.745924\nvn 0.718225 0.152966 -0.678788\nvn -0.718225 0.152966 -0.678788\nvn 0.738828 0.544366 -0.397240\nvn -0.738828 0.544366 -0.397240\nvn 0.342771 -0.157888 -0.926056\nvn -0.342771 -0.157888 -0.926056\nvn 0.226983 0.786746 -0.574030\nvn -0.226983 0.786746 -0.574030\nvn -0.172189 -0.979491 -0.104638\nvn 0.172189 -0.979491 -0.104638\nvn 0.042460 0.401319 -0.914954\nvn -0.042460 0.401319 -0.914954\nvn -0.161572 0.969432 -0.184654\nvn 0.161572 0.969432 -0.184654\nvn 0.979149 0.048332 -0.197308\nvn -0.979149 0.048332 -0.197308\nvn 0.946968 0.307922 -0.091845\nvn -0.946968 0.307922 -0.091845\nvn 0.979450 -0.066136 -0.190536\nvn -0.979450 -0.066136 -0.190536\nvn 0.993775 -0.106953 -0.031195\nvn -0.993775 -0.106953 -0.031195\nvn 0.711563 0.050060 0.700836\nvn -0.711563 0.050060 0.700836\nvn 0.372160 0.084651 0.924300\nvn -0.372160 0.084651 0.924300\nvn 0.446529 0.231010 0.864434\nvn -0.446529 0.231010 0.864434\nvn 0.606579 0.240489 0.757778\nvn -0.606579 0.240489 0.757778\nvn 0.732489 0.240675 0.636817\nvn -0.732489 0.240675 0.636817\nvn 0.263732 0.853252 0.449896\nvn -0.263732 0.853252 0.449896\nvn 0.556817 -0.767332 0.318051\nvn -0.556817 -0.767332 0.318051\nvn 0.500431 -0.818999 0.280730\nvn -0.500431 -0.818999 0.280730\nvn 0.318954 -0.420485 0.849389\nvn -0.318954 -0.420485 0.849389\nvn 0.719759 -0.279303 0.635561\nvn -0.719759 -0.279303 0.635561\nvn 0.497205 -0.747333 0.440774\nvn -0.497205 -0.747333 0.440774\nvn 0.350559 0.855666 -0.380715\nvn -0.350559 0.855666 -0.380715\nvn 0.456551 0.873015 -0.171485\nvn -0.456551 0.873015 -0.171485\nvn 0.258262 0.960298 -0.105487\nvn -0.258262 0.960298 -0.105487\nvn 0.245528 0.966063 0.080238\nvn -0.245528 0.966063 0.080238\nvn 0.464292 0.883654 0.059909\nvn -0.464292 0.883654 0.059909\nvn 0.622461 0.720981 0.304514\nvn -0.622462 0.720981 0.304514\nvn 0.450020 0.602706 -0.658959\nvn -0.450021 0.602706 -0.658959\nvn -0.266664 0.488415 -0.830868\nvn 0.266664 0.488415 -0.830868\nvn -0.828395 0.511137 -0.229130\nvn 0.828395 0.511137 -0.229130\nvn -0.525061 0.772732 0.356645\nvn 0.525061 0.772732 0.356645\nvn 0.454637 0.687284 0.566521\nvn -0.454637 0.687284 0.566521\nvn 0.699600 0.555239 0.449743\nvn -0.699601 0.555238 0.449743\nvn 0.722010 -0.112644 0.682652\nvn -0.722010 -0.112644 0.682652\nvn -0.191904 0.938824 -0.285975\nvn 0.191904 0.938824 -0.285975\nvn 0.904808 -0.204748 0.373365\nvn -0.904808 -0.204748 0.373365\nvn 0.103418 0.982467 -0.155126\nvn -0.103418 0.982467 -0.155126\nvn 0.084056 0.353037 -0.931826\nvn -0.084056 0.353037 -0.931826\nvn 0.644606 0.759399 0.088302\nvn -0.644606 0.759399 0.088302\nvn 0.430935 0.767848 -0.474029\nvn -0.430935 0.767848 -0.474029\nvn 0.803235 0.346222 0.484711\nvn -0.803235 0.346222 0.484711\nvn 0.581122 0.701353 0.412797\nvn -0.581122 0.701353 0.412797\nvn 0.591001 0.682205 0.430482\nvn -0.591001 0.682205 0.430482\nvn 0.981815 -0.059145 0.180394\nvn -0.981815 -0.059145 0.180394\nvn 0.910486 -0.117482 0.396502\nvn -0.910486 -0.117482 0.396502\nvn 0.997202 -0.072524 0.018131\nvn -0.997202 -0.072524 0.018131\nvn 0.731310 0.192450 0.654330\nvn -0.731310 0.192450 0.654330\nvn 0.786718 0.107280 0.607919\nvn -0.786718 0.107280 0.607919\nvn 0.702247 0.117041 0.702247\nvn -0.702247 0.117041 0.702247\nvn 0.184048 -0.051124 -0.981587\nvn -0.184048 -0.051124 -0.981587\nvn 0.935190 0.128359 -0.330067\nvn -0.935190 0.128359 -0.330067\nvn 0.663348 0.055279 0.746267\nvn -0.663348 0.055279 0.746267\nvn -0.008522 0.076694 -0.997018\nvn 0.008522 0.076694 -0.997018\nvn 0.623691 0.335381 0.706066\nvn -0.623692 0.335381 0.706065\nvn 0.273312 0.358722 0.892535\nvn -0.273312 0.358722 0.892535\nvn -0.832769 -0.219977 0.508041\nvn 0.832769 -0.219977 0.508041\nvn -0.833909 -0.498081 -0.237721\nvn 0.833909 -0.498081 -0.237721\nvn -0.565464 -0.253882 -0.784726\nvn 0.565464 -0.253882 -0.784726\nvn -0.055965 0.067158 -0.996172\nvn 0.055965 0.067158 -0.996172\nvn 0.144498 0.989255 -0.022230\nvn -0.144498 0.989255 -0.022230\nvn 0.327452 0.942664 -0.064498\nvn -0.327452 0.942664 -0.064498\nvn 0.312667 0.949580 -0.023160\nvn -0.312667 0.949580 -0.023160\nvn 0.170988 0.984893 -0.027358\nvn -0.170988 0.984893 -0.027358\nvn 0.348658 0.892906 -0.284879\nvn -0.348659 0.892906 -0.284879\nvn 0.400582 0.915617 0.034336\nvn -0.400583 0.915617 0.034336\nvn 0.257194 0.964478 0.060280\nvn -0.257194 0.964478 0.060280\nvn 0.063697 0.997913 0.010616\nvn -0.063697 0.997913 0.010616\nvn -0.363700 0.610078 -0.703936\nvn 0.363700 0.610078 -0.703936\nvn 0.629882 0.775881 -0.035457\nvn -0.629882 0.775881 -0.035457\nvn 0.447210 0.871726 0.200243\nvn -0.447210 0.871726 0.200243\nvn 0.507163 0.834843 0.214062\nvn -0.507163 0.834843 0.214062\nvn 0.525823 0.809259 -0.261934\nvn -0.525823 0.809259 -0.261934\nvn 0.297964 0.757979 -0.580246\nvn -0.297964 0.757979 -0.580246\nvn 0.093038 -0.080501 0.992403\nvn -0.093038 -0.080501 0.992403\nvn 0.500580 0.007971 0.865653\nvn -0.500580 0.007971 0.865653\nvn 0.928516 0.274791 0.249696\nvn -0.928516 0.274791 0.249696\nvn 0.839260 -0.037780 -0.542416\nvn -0.839260 -0.037780 -0.542416\nvn -0.235534 -0.258908 -0.936744\nvn 0.235534 -0.258908 -0.936744\nvn -0.449919 -0.128548 -0.883769\nvn 0.449919 -0.128548 -0.883769\nvn -0.538363 -0.842656 0.009753\nvn 0.538364 -0.842656 0.009753\nvn -0.191040 -0.981286 0.024097\nvn 0.191040 -0.981286 0.024097\nvn 0.404624 -0.914097 -0.026581\nvn -0.404624 -0.914097 -0.026581\nvn -0.781868 0.019678 -0.623133\nvn 0.781868 0.019678 -0.623133\nvn 0.542773 -0.814160 0.206254\nvn -0.542773 -0.814160 0.206254\nvn -0.247398 -0.294522 0.923066\nvn 0.247398 -0.294522 0.923066\ns off\nf 47//1 1//1 3//1\nf 47//1 3//1 45//1\nf 4//2 2//2 48//2\nf 4//2 48//2 46//2\nf 45//3 3//3 5//3\nf 45//3 5//3 43//3\nf 6//4 4//4 46//4\nf 6//4 46//4 44//4\nf 3//5 9//5 7//5\nf 3//5 7//5 5//5\nf 8//6 10//6 4//6\nf 8//6 4//6 6//6\nf 1//7 11//7 9//7\nf 1//7 9//7 3//7\nf 10//8 12//8 2//8\nf 10//8 2//8 4//8\nf 11//9 13//9 15//9\nf 11//9 15//9 9//9\nf 16//10 14//10 12//10\nf 16//10 12//10 10//10\nf 9//11 15//11 17//11\nf 9//11 17//11 7//11\nf 18//12 16//12 10//12\nf 18//12 10//12 8//12\nf 15//13 21//13 19//13\nf 15//13 19//13 17//13\nf 20//14 22//14 16//14\nf 20//14 16//14 18//14\nf 13//15 23//15 21//15\nf 13//15 21//15 15//15\nf 22//16 24//16 14//16\nf 22//16 14//16 16//16\nf 23//17 25//17 27//17\nf 23//17 27//17 21//17\nf 28//18 26//18 24//18\nf 28//18 24//18 22//18\nf 21//19 27//19 29//19\nf 21//19 29//19 19//19\nf 30//20 28//20 22//20\nf 30//20 22//20 20//20\nf 27//21 33//21 31//21\nf 27//21 31//21 29//21\nf 32//22 34//22 28//22\nf 32//22 28//22 30//22\nf 25//23 35//23 33//23\nf 25//23 33//23 27//23\nf 34//24 36//24 26//24\nf 34//24 26//24 28//24\nf 35//25 37//25 39//25\nf 35//25 39//25 33//25\nf 40//26 38//26 36//26\nf 40//26 36//26 34//26\nf 33//27 39//27 41//27\nf 33//27 41//27 31//27\nf 42//28 40//28 34//28\nf 42//28 34//28 32//28\nf 39//29 45//29 43//29\nf 39//29 43//29 41//29\nf 44//30 46//30 40//30\nf 44//30 40//30 42//30\nf 37//31 47//31 45//31\nf 37//31 45//31 39//31\nf 46//32 48//32 38//32\nf 46//32 38//32 40//32\nf 47//33 37//33 51//33\nf 47//33 51//33 49//33\nf 52//34 38//34 48//34\nf 52//34 48//34 50//34\nf 37//35 35//35 53//35\nf 37//35 53//35 51//35\nf 54//36 36//36 38//36\nf 54//36 38//36 52//36\nf 35//37 25//37 55//37\nf 35//37 55//37 53//37\nf 56//38 26//38 36//38\nf 56//38 36//38 54//38\nf 25//39 23//39 57//39\nf 25//39 57//39 55//39\nf 58//40 24//40 26//40\nf 58//40 26//40 56//40\nf 23//41 13//41 59//41\nf 23//41 59//41 57//41\nf 60//42 14//42 24//42\nf 60//42 24//42 58//42\nf 13//43 11//43 63//43\nf 13//43 63//43 59//43\nf 64//44 12//44 14//44\nf 64//44 14//44 60//44\nf 11//45 1//45 65//45\nf 11//45 65//45 63//45\nf 66//46 2//46 12//46\nf 66//46 12//46 64//46\nf 1//47 47//47 49//47\nf 1//47 49//47 65//47\nf 50//48 48//48 2//48\nf 50//48 2//48 66//48\nf 61//49 65//49 49//49\nf 50//50 66//50 62//50\nf 63//51 65//51 61//51\nf 62//52 66//52 64//52\nf 61//53 59//53 63//53\nf 64//54 60//54 62//54\nf 61//55 57//55 59//55\nf 60//56 58//56 62//56\nf 61//57 55//57 57//57\nf 58//58 56//58 62//58\nf 61//59 53//59 55//59\nf 56//60 54//60 62//60\nf 61//61 51//61 53//61\nf 54//62 52//62 62//62\nf 61//63 49//63 51//63\nf 52//64 50//64 62//64\nf 89//65 174//65 176//65\nf 89//65 176//65 91//65\nf 176//66 175//66 90//66\nf 176//66 90//66 91//66\nf 87//67 172//67 174//67\nf 87//67 174//67 89//67\nf 175//68 173//68 88//68\nf 175//68 88//68 90//68\nf 85//69 170//69 172//69\nf 85//69 172//69 87//69\nf 173//70 171//70 86//70\nf 173//70 86//70 88//70\nf 83//71 168//71 170//71\nf 83//71 170//71 85//71\nf 171//72 169//72 84//72\nf 171//72 84//72 86//72\nf 81//73 166//73 168//73\nf 81//73 168//73 83//73\nf 169//74 167//74 82//74\nf 169//74 82//74 84//74\nf 79//75 92//75 146//75\nf 79//75 146//75 164//75\nf 147//76 93//76 80//76\nf 147//76 80//76 165//76\nf 92//77 94//77 148//77\nf 92//77 148//77 146//77\nf 149//78 95//78 93//78\nf 149//78 93//78 147//78\nf 94//79 96//79 150//79\nf 94//79 150//79 148//79\nf 151//80 97//80 95//80\nf 151//80 95//80 149//80\nf 96//81 98//81 152//81\nf 96//81 152//81 150//81\nf 153//82 99//82 97//82\nf 153//82 97//82 151//82\nf 98//83 100//83 154//83\nf 98//83 154//83 152//83\nf 155//84 101//84 99//84\nf 155//84 99//84 153//84\nf 100//85 102//85 156//85\nf 100//85 156//85 154//85\nf 157//86 103//86 101//86\nf 157//86 101//86 155//86\nf 102//87 104//87 158//87\nf 102//87 158//87 156//87\nf 159//88 105//88 103//88\nf 159//88 103//88 157//88\nf 104//89 106//89 160//89\nf 104//89 160//89 158//89\nf 161//90 107//90 105//90\nf 161//90 105//90 159//90\nf 106//91 108//91 162//91\nf 106//91 162//91 160//91\nf 163//92 109//92 107//92\nf 163//92 107//92 161//92\nf 108//93 67//93 68//93\nf 108//93 68//93 162//93\nf 68//94 67//94 109//94\nf 68//94 109//94 163//94\nf 110//95 128//95 160//95\nf 110//95 160//95 162//95\nf 161//96 129//96 111//96\nf 161//96 111//96 163//96\nf 128//97 179//97 158//97\nf 128//97 158//97 160//97\nf 159//98 180//98 129//98\nf 159//98 129//98 161//98\nf 126//99 156//99 158//99\nf 126//99 158//99 179//99\nf 159//100 157//100 127//100\nf 159//100 127//100 180//100\nf 124//101 154//101 156//101\nf 124//101 156//101 126//101\nf 157//102 155//102 125//102\nf 157//102 125//102 127//102\nf 122//103 152//103 154//103\nf 122//103 154//103 124//103\nf 155//104 153//104 123//104\nf 155//104 123//104 125//104\nf 120//105 150//105 152//105\nf 120//105 152//105 122//105\nf 153//106 151//106 121//106\nf 153//106 121//106 123//106\nf 118//107 148//107 150//107\nf 118//107 150//107 120//107\nf 151//108 149//108 119//108\nf 151//108 119//108 121//108\nf 116//109 146//109 148//109\nf 116//109 148//109 118//109\nf 149//110 147//110 117//110\nf 149//110 117//110 119//110\nf 114//111 164//111 146//111\nf 114//111 146//111 116//111\nf 147//112 165//112 115//112\nf 147//112 115//112 117//112\nf 114//113 181//113 177//113\nf 114//113 177//113 164//113\nf 177//114 182//114 115//114\nf 177//114 115//114 165//114\nf 110//115 162//115 68//115\nf 110//115 68//115 112//115\nf 68//116 163//116 111//116\nf 68//116 111//116 113//116\nf 112//117 68//117 178//117\nf 112//117 178//117 183//117\nf 178//118 68//118 113//118\nf 178//118 113//118 184//118\nf 177//119 181//119 183//119\nf 177//119 183//119 178//119\nf 184//120 182//120 177//120\nf 184//120 177//120 178//120\nf 135//121 137//121 176//121\nf 135//121 176//121 174//121\nf 176//122 137//122 136//122\nf 176//122 136//122 175//122\nf 133//123 135//123 174//123\nf 133//123 174//123 172//123\nf 175//124 136//124 134//124\nf 175//124 134//124 173//124\nf 131//125 133//125 172//125\nf 131//125 172//125 170//125\nf 173//126 134//126 132//126\nf 173//126 132//126 171//126\nf 166//127 187//127 185//127\nf 166//127 185//127 168//127\nf 186//128 188//128 167//128\nf 186//128 167//128 169//128\nf 131//129 170//129 168//129\nf 131//129 168//129 185//129\nf 169//130 171//130 132//130\nf 169//130 132//130 186//130\nf 144//131 190//131 189//131\nf 144//131 189//131 187//131\nf 189//132 190//132 145//132\nf 189//132 145//132 188//132\nf 185//133 187//133 189//133\nf 185//133 189//133 69//133\nf 189//134 188//134 186//134\nf 189//134 186//134 69//134\nf 130//135 131//135 185//135\nf 130//135 185//135 69//135\nf 186//135 132//135 130//135\nf 186//135 130//135 69//135\nf 142//136 193//136 191//136\nf 142//136 191//136 144//136\nf 192//137 194//137 143//137\nf 192//137 143//137 145//137\nf 140//138 195//138 193//138\nf 140//138 193//138 142//138\nf 194//139 196//139 141//139\nf 194//139 141//139 143//139\nf 139//140 197//140 195//140\nf 139//140 195//140 140//140\nf 196//141 198//141 139//141\nf 196//141 139//141 141//141\nf 138//142 71//142 197//142\nf 138//142 197//142 139//142\nf 198//143 71//143 138//143\nf 198//143 138//143 139//143\nf 190//144 144//144 191//144\nf 190//144 191//144 70//144\nf 192//145 145//145 190//145\nf 192//145 190//145 70//145\nf 70//146 191//146 206//146\nf 70//146 206//146 208//146\nf 207//147 192//147 70//147\nf 207//147 70//147 208//147\nf 71//148 199//148 200//148\nf 71//148 200//148 197//148\nf 201//149 199//149 71//149\nf 201//149 71//149 198//149\nf 197//150 200//150 202//150\nf 197//150 202//150 195//150\nf 203//151 201//151 198//151\nf 203//151 198//151 196//151\nf 195//152 202//152 204//152\nf 195//152 204//152 193//152\nf 205//153 203//153 196//153\nf 205//153 196//153 194//153\nf 193//154 204//154 206//154\nf 193//154 206//154 191//154\nf 207//155 205//155 194//155\nf 207//155 194//155 192//155\nf 199//156 204//156 202//156\nf 199//156 202//156 200//156\nf 203//157 205//157 199//157\nf 203//157 199//157 201//157\nf 199//158 208//158 206//158\nf 199//158 206//158 204//158\nf 207//159 208//159 199//159\nf 207//159 199//159 205//159\nf 139//160 140//160 164//160\nf 139//160 164//160 177//160\nf 165//161 141//161 139//161\nf 165//161 139//161 177//161\nf 140//162 142//162 211//162\nf 140//162 211//162 164//162\nf 212//163 143//163 141//163\nf 212//163 141//163 165//163\nf 142//164 144//164 213//164\nf 142//164 213//164 211//164\nf 214//165 145//165 143//165\nf 214//165 143//165 212//165\nf 144//166 187//166 166//166\nf 144//166 166//166 213//166\nf 167//167 188//167 145//167\nf 167//167 145//167 214//167\nf 81//168 209//168 213//168\nf 81//168 213//168 166//168\nf 214//169 210//169 82//169\nf 214//169 82//169 167//169\nf 209//170 215//170 211//170\nf 209//170 211//170 213//170\nf 212//171 216//171 210//171\nf 212//171 210//171 214//171\nf 79//172 164//172 211//172\nf 79//172 211//172 215//172\nf 212//173 165//173 80//173\nf 212//173 80//173 216//173\nf 131//174 130//174 72//174\nf 131//174 72//174 222//174\nf 72//175 130//175 132//175\nf 72//175 132//175 223//175\nf 133//176 131//176 222//176\nf 133//176 222//176 220//176\nf 223//177 132//177 134//177\nf 223//177 134//177 221//177\nf 135//178 133//178 220//178\nf 135//178 220//178 218//178\nf 221//179 134//179 136//179\nf 221//179 136//179 219//179\nf 137//180 135//180 218//180\nf 137//180 218//180 217//180\nf 219//181 136//181 137//181\nf 219//181 137//181 217//181\nf 217//182 218//182 229//182\nf 217//182 229//182 231//182\nf 230//183 219//183 217//183\nf 230//183 217//183 231//183\nf 218//184 220//184 227//184\nf 218//184 227//184 229//184\nf 228//185 221//185 219//185\nf 228//185 219//185 230//185\nf 220//186 222//186 225//186\nf 220//186 225//186 227//186\nf 226//187 223//187 221//187\nf 226//187 221//187 228//187\nf 222//188 72//188 224//188\nf 222//188 224//188 225//188\nf 224//189 72//189 223//189\nf 224//189 223//189 226//189\nf 224//190 231//190 229//190\nf 224//190 229//190 225//190\nf 230//191 231//191 224//191\nf 230//191 224//191 226//191\nf 225//192 229//192 227//192\nf 228//193 230//193 226//193\nf 183//194 181//194 234//194\nf 183//194 234//194 232//194\nf 235//195 182//195 184//195\nf 235//195 184//195 233//195\nf 112//196 183//196 232//196\nf 112//196 232//196 254//196\nf 233//197 184//197 113//197\nf 233//197 113//197 255//197\nf 110//198 112//198 254//198\nf 110//198 254//198 256//198\nf 255//199 113//199 111//199\nf 255//199 111//199 257//199\nf 181//200 114//200 252//200\nf 181//200 252//200 234//200\nf 253//201 115//201 182//201\nf 253//201 182//201 235//201\nf 114//202 116//202 250//202\nf 114//202 250//202 252//202\nf 251//203 117//203 115//203\nf 251//203 115//203 253//203\nf 116//204 118//204 248//204\nf 116//204 248//204 250//204\nf 249//205 119//205 117//205\nf 249//205 117//205 251//205\nf 118//206 120//206 246//206\nf 118//206 246//206 248//206\nf 247//207 121//207 119//207\nf 247//207 119//207 249//207\nf 120//208 122//208 244//208\nf 120//208 244//208 246//208\nf 245//209 123//209 121//209\nf 245//209 121//209 247//209\nf 122//210 124//210 242//210\nf 122//210 242//210 244//210\nf 243//211 125//211 123//211\nf 243//211 123//211 245//211\nf 124//212 126//212 240//212\nf 124//212 240//212 242//212\nf 241//213 127//213 125//213\nf 241//213 125//213 243//213\nf 126//214 179//214 236//214\nf 126//214 236//214 240//214\nf 237//215 180//215 127//215\nf 237//215 127//215 241//215\nf 179//216 128//216 238//216\nf 179//216 238//216 236//216\nf 239//217 129//217 180//217\nf 239//217 180//217 237//217\nf 128//218 110//218 256//218\nf 128//218 256//218 238//218\nf 257//219 111//219 129//219\nf 257//219 129//219 239//219\nf 238//220 256//220 258//220\nf 238//220 258//220 276//220\nf 259//221 257//221 239//221\nf 259//221 239//221 277//221\nf 236//222 238//222 276//222\nf 236//222 276//222 278//222\nf 277//223 239//223 237//223\nf 277//223 237//223 279//223\nf 240//224 236//224 278//224\nf 240//224 278//224 274//224\nf 279//225 237//225 241//225\nf 279//225 241//225 275//225\nf 242//226 240//226 274//226\nf 242//226 274//226 272//226\nf 275//227 241//227 243//227\nf 275//227 243//227 273//227\nf 244//228 242//228 272//228\nf 244//228 272//228 270//228\nf 273//229 243//229 245//229\nf 273//229 245//229 271//229\nf 246//230 244//230 270//230\nf 246//230 270//230 268//230\nf 271//231 245//231 247//231\nf 271//231 247//231 269//231\nf 248//232 246//232 268//232\nf 248//232 268//232 266//232\nf 269//233 247//233 249//233\nf 269//233 249//233 267//233\nf 250//234 248//234 266//234\nf 250//234 266//234 264//234\nf 267//235 249//235 251//235\nf 267//235 251//235 265//235\nf 252//236 250//236 264//236\nf 252//236 264//236 262//236\nf 265//237 251//237 253//237\nf 265//237 253//237 263//237\nf 234//238 252//238 262//238\nf 234//238 262//238 280//238\nf 263//239 253//239 235//239\nf 263//239 235//239 281//239\nf 256//240 254//240 260//240\nf 256//240 260//240 258//240\nf 261//241 255//241 257//241\nf 261//241 257//241 259//241\nf 254//242 232//242 282//242\nf 254//242 282//242 260//242\nf 283//243 233//243 255//243\nf 283//243 255//243 261//243\nf 232//244 234//244 280//244\nf 232//244 280//244 282//244\nf 281//245 235//245 233//245\nf 281//245 233//245 283//245\nf 67//246 108//246 284//246\nf 67//246 284//246 73//246\nf 285//247 109//247 67//247\nf 285//247 67//247 73//247\nf 108//248 106//248 286//248\nf 108//248 286//248 284//248\nf 287//249 107//249 109//249\nf 287//249 109//249 285//249\nf 106//250 104//250 288//250\nf 106//250 288//250 286//250\nf 289//251 105//251 107//251\nf 289//251 107//251 287//251\nf 104//252 102//252 290//252\nf 104//252 290//252 288//252\nf 291//253 103//253 105//253\nf 291//253 105//253 289//253\nf 102//254 100//254 292//254\nf 102//254 292//254 290//254\nf 293//255 101//255 103//255\nf 293//255 103//255 291//255\nf 100//256 98//256 294//256\nf 100//256 294//256 292//256\nf 295//257 99//257 101//257\nf 295//257 101//257 293//257\nf 98//258 96//258 296//258\nf 98//258 296//258 294//258\nf 297//259 97//259 99//259\nf 297//259 99//259 295//259\nf 96//260 94//260 298//260\nf 96//260 298//260 296//260\nf 299//261 95//261 97//261\nf 299//261 97//261 297//261\nf 94//262 92//262 300//262\nf 94//262 300//262 298//262\nf 301//263 93//263 95//263\nf 301//263 95//263 299//263\nf 308//264 309//264 328//264\nf 308//264 328//264 338//264\nf 329//265 309//265 308//265\nf 329//265 308//265 339//265\nf 307//266 308//266 338//266\nf 307//266 338//266 336//266\nf 339//267 308//267 307//267\nf 339//267 307//267 337//267\nf 306//268 307//268 336//268\nf 306//268 336//268 340//268\nf 337//269 307//269 306//269\nf 337//269 306//269 341//269\nf 89//270 91//270 306//270\nf 89//270 306//270 340//270\nf 306//271 91//271 90//271\nf 306//271 90//271 341//271\nf 87//272 89//272 340//272\nf 87//272 340//272 334//272\nf 341//273 90//273 88//273\nf 341//273 88//273 335//273\nf 85//274 87//274 334//274\nf 85//274 334//274 330//274\nf 335//275 88//275 86//275\nf 335//275 86//275 331//275\nf 83//276 85//276 330//276\nf 83//276 330//276 332//276\nf 331//277 86//277 84//277\nf 331//277 84//277 333//277\nf 330//278 336//278 338//278\nf 330//278 338//278 332//278\nf 339//279 337//279 331//279\nf 339//279 331//279 333//279\nf 330//280 334//280 340//280\nf 330//280 340//280 336//280\nf 341//281 335//281 331//281\nf 341//281 331//281 337//281\nf 326//282 332//282 338//282\nf 326//282 338//282 328//282\nf 339//283 333//283 327//283\nf 339//283 327//283 329//283\nf 81//284 83//284 332//284\nf 81//284 332//284 326//284\nf 333//285 84//285 82//285\nf 333//285 82//285 327//285\nf 209//286 342//286 344//286\nf 209//286 344//286 215//286\nf 345//287 343//287 210//287\nf 345//287 210//287 216//287\nf 81//288 326//288 342//288\nf 81//288 342//288 209//288\nf 343//289 327//289 82//289\nf 343//289 82//289 210//289\nf 79//290 215//290 344//290\nf 79//290 344//290 346//290\nf 345//291 216//291 80//291\nf 345//291 80//291 347//291\nf 79//292 346//292 300//292\nf 79//292 300//292 92//292\nf 301//293 347//293 80//293\nf 301//293 80//293 93//293\nf 77//294 324//294 352//294\nf 77//294 352//294 304//294\nf 353//295 325//295 77//295\nf 353//295 77//295 304//295\nf 304//296 352//296 350//296\nf 304//296 350//296 78//296\nf 351//297 353//297 304//297\nf 351//297 304//297 78//297\nf 78//298 350//298 348//298\nf 78//298 348//298 305//298\nf 349//299 351//299 78//299\nf 349//299 78//299 305//299\nf 305//300 348//300 328//300\nf 305//300 328//300 309//300\nf 329//301 349//301 305//301\nf 329//301 305//301 309//301\nf 326//302 328//302 348//302\nf 326//302 348//302 342//302\nf 349//303 329//303 327//303\nf 349//303 327//303 343//303\nf 296//304 298//304 318//304\nf 296//304 318//304 310//304\nf 319//305 299//305 297//305\nf 319//305 297//305 311//305\nf 76//306 316//306 324//306\nf 76//306 324//306 77//306\nf 325//307 317//307 76//307\nf 325//307 76//307 77//307\nf 302//308 358//308 356//308\nf 302//308 356//308 303//308\nf 357//309 359//309 302//309\nf 357//309 302//309 303//309\nf 303//310 356//310 354//310\nf 303//310 354//310 75//310\nf 355//311 357//311 303//311\nf 355//311 303//311 75//311\nf 75//312 354//312 316//312\nf 75//312 316//312 76//312\nf 317//313 355//313 75//313\nf 317//313 75//313 76//313\nf 292//314 294//314 362//314\nf 292//314 362//314 364//314\nf 363//315 295//315 293//315\nf 363//315 293//315 365//315\nf 364//316 362//316 368//316\nf 364//316 368//316 366//316\nf 369//317 363//317 365//317\nf 369//317 365//317 367//317\nf 366//318 368//318 370//318\nf 366//318 370//318 372//318\nf 371//319 369//319 367//319\nf 371//319 367//319 373//319\nf 372//320 370//320 376//320\nf 372//320 376//320 374//320\nf 377//321 371//321 373//321\nf 377//321 373//321 375//321\nf 314//322 378//322 374//322\nf 314//322 374//322 376//322\nf 375//323 379//323 315//323\nf 375//323 315//323 377//323\nf 316//324 354//324 374//324\nf 316//324 374//324 378//324\nf 375//325 355//325 317//325\nf 375//325 317//325 379//325\nf 354//326 356//326 372//326\nf 354//326 372//326 374//326\nf 373//327 357//327 355//327\nf 373//327 355//327 375//327\nf 356//328 358//328 366//328\nf 356//328 366//328 372//328\nf 367//329 359//329 357//329\nf 367//329 357//329 373//329\nf 358//330 360//330 364//330\nf 358//330 364//330 366//330\nf 365//331 361//331 359//331\nf 365//331 359//331 367//331\nf 290//332 292//332 364//332\nf 290//332 364//332 360//332\nf 365//333 293//333 291//333\nf 365//333 291//333 361//333\nf 74//334 360//334 358//334\nf 74//334 358//334 302//334\nf 359//335 361//335 74//335\nf 359//335 74//335 302//335\nf 284//336 286//336 288//336\nf 284//336 288//336 290//336\nf 289//337 287//337 285//337\nf 289//337 285//337 291//337\nf 284//338 290//338 360//338\nf 284//338 360//338 74//338\nf 361//339 291//339 285//339\nf 361//339 285//339 74//339\nf 73//340 284//340 74//340\nf 74//341 285//341 73//341\nf 294//342 296//342 310//342\nf 294//342 310//342 362//342\nf 311//343 297//343 295//343\nf 311//343 295//343 363//343\nf 310//344 312//344 368//344\nf 310//344 368//344 362//344\nf 369//345 313//345 311//345\nf 369//345 311//345 363//345\nf 312//346 382//346 370//346\nf 312//346 370//346 368//346\nf 371//347 383//347 313//347\nf 371//347 313//347 369//347\nf 314//348 376//348 370//348\nf 314//348 370//348 382//348\nf 371//349 377//349 315//349\nf 371//349 315//349 383//349\nf 348//350 350//350 386//350\nf 348//350 386//350 384//350\nf 387//351 351//351 349//351\nf 387//351 349//351 385//351\nf 318//352 384//352 386//352\nf 318//352 386//352 320//352\nf 387//353 385//353 319//353\nf 387//353 319//353 321//353\nf 298//354 300//354 384//354\nf 298//354 384//354 318//354\nf 385//355 301//355 299//355\nf 385//355 299//355 319//355\nf 300//356 344//356 342//356\nf 300//356 342//356 384//356\nf 343//357 345//357 301//357\nf 343//357 301//357 385//357\nf 342//358 348//358 384//358\nf 385//359 349//359 343//359\nf 300//360 346//360 344//360\nf 345//361 347//361 301//361\nf 314//362 322//362 380//362\nf 314//362 380//362 378//362\nf 381//363 323//363 315//363\nf 381//363 315//363 379//363\nf 316//364 378//364 380//364\nf 316//364 380//364 324//364\nf 381//365 379//365 317//365\nf 381//365 317//365 325//365\nf 320//366 386//366 380//366\nf 320//366 380//366 322//366\nf 381//367 387//367 321//367\nf 381//367 321//367 323//367\nf 350//368 352//368 380//368\nf 350//368 380//368 386//368\nf 381//369 353//369 351//369\nf 381//369 351//369 387//369\nf 324//370 380//370 352//370\nf 353//371 381//371 325//371\nf 400//372 388//372 414//372\nf 400//372 414//372 402//372\nf 415//373 389//373 401//373\nf 415//373 401//373 403//373\nf 400//374 402//374 404//374\nf 400//374 404//374 398//374\nf 405//375 403//375 401//375\nf 405//375 401//375 399//375\nf 398//376 404//376 406//376\nf 398//376 406//376 396//376\nf 407//377 405//377 399//377\nf 407//377 399//377 397//377\nf 396//378 406//378 408//378\nf 396//378 408//378 394//378\nf 409//379 407//379 397//379\nf 409//379 397//379 395//379\nf 394//380 408//380 410//380\nf 394//380 410//380 392//380\nf 411//381 409//381 395//381\nf 411//381 395//381 393//381\nf 392//382 410//382 412//382\nf 392//382 412//382 390//382\nf 413//383 411//383 393//383\nf 413//383 393//383 391//383\nf 410//384 420//384 418//384\nf 410//384 418//384 412//384\nf 419//385 421//385 411//385\nf 419//385 411//385 413//385\nf 408//386 422//386 420//386\nf 408//386 420//386 410//386\nf 421//387 423//387 409//387\nf 421//387 409//387 411//387\nf 406//388 424//388 422//388\nf 406//388 422//388 408//388\nf 423//389 425//389 407//389\nf 423//389 407//389 409//389\nf 404//390 426//390 424//390\nf 404//390 424//390 406//390\nf 425//391 427//391 405//391\nf 425//391 405//391 407//391\nf 402//392 428//392 426//392\nf 402//392 426//392 404//392\nf 427//393 429//393 403//393\nf 427//393 403//393 405//393\nf 402//394 414//394 416//394\nf 402//394 416//394 428//394\nf 417//395 415//395 403//395\nf 417//395 403//395 429//395\nf 318//396 320//396 444//396\nf 318//396 444//396 442//396\nf 445//397 321//397 319//397\nf 445//397 319//397 443//397\nf 320//398 390//398 412//398\nf 320//398 412//398 444//398\nf 413//399 391//399 321//399\nf 413//399 321//399 445//399\nf 310//400 318//400 442//400\nf 310//400 442//400 312//400\nf 443//401 319//401 311//401\nf 443//401 311//401 313//401\nf 382//402 430//402 414//402\nf 382//402 414//402 388//402\nf 415//403 431//403 383//403\nf 415//403 383//403 389//403\nf 412//404 418//404 440//404\nf 412//404 440//404 444//404\nf 441//405 419//405 413//405\nf 441//405 413//405 445//405\nf 438//406 446//406 444//406\nf 438//406 444//406 440//406\nf 445//407 447//407 439//407\nf 445//407 439//407 441//407\nf 434//408 446//408 438//408\nf 434//408 438//408 436//408\nf 439//409 447//409 435//409\nf 439//409 435//409 437//409\nf 432//410 448//410 446//410\nf 432//410 446//410 434//410\nf 447//411 449//411 433//411\nf 447//411 433//411 435//411\nf 430//412 448//412 432//412\nf 430//412 432//412 450//412\nf 433//413 449//413 431//413\nf 433//413 431//413 451//413\nf 414//414 430//414 450//414\nf 414//414 450//414 416//414\nf 451//415 431//415 415//415\nf 451//415 415//415 417//415\nf 312//416 448//416 430//416\nf 312//416 430//416 382//416\nf 431//417 449//417 313//417\nf 431//417 313//417 383//417\nf 312//418 442//418 446//418\nf 312//418 446//418 448//418\nf 447//419 443//419 313//419\nf 447//419 313//419 449//419\nf 442//420 444//420 446//420\nf 447//421 445//421 443//421\nf 416//422 450//422 452//422\nf 416//422 452//422 476//422\nf 453//423 451//423 417//423\nf 453//423 417//423 477//423\nf 450//424 432//424 462//424\nf 450//424 462//424 452//424\nf 463//425 433//425 451//425\nf 463//425 451//425 453//425\nf 432//426 434//426 460//426\nf 432//426 460//426 462//426\nf 461//427 435//427 433//427\nf 461//427 433//427 463//427\nf 434//428 436//428 458//428\nf 434//428 458//428 460//428\nf 459//429 437//429 435//429\nf 459//429 435//429 461//429\nf 436//430 438//430 456//430\nf 436//430 456//430 458//430\nf 457//431 439//431 437//431\nf 457//431 437//431 459//431\nf 438//432 440//432 454//432\nf 438//432 454//432 456//432\nf 455//433 441//433 439//433\nf 455//433 439//433 457//433\nf 440//434 418//434 474//434\nf 440//434 474//434 454//434\nf 475//435 419//435 441//435\nf 475//435 441//435 455//435\nf 428//436 416//436 476//436\nf 428//436 476//436 464//436\nf 477//437 417//437 429//437\nf 477//437 429//437 465//437\nf 426//438 428//438 464//438\nf 426//438 464//438 466//438\nf 465//439 429//439 427//439\nf 465//439 427//439 467//439\nf 424//440 426//440 466//440\nf 424//440 466//440 468//440\nf 467//441 427//441 425//441\nf 467//441 425//441 469//441\nf 422//442 424//442 468//442\nf 422//442 468//442 470//442\nf 469//443 425//443 423//443\nf 469//443 423//443 471//443\nf 420//444 422//444 470//444\nf 420//444 470//444 472//444\nf 471//445 423//445 421//445\nf 471//445 421//445 473//445\nf 418//446 420//446 472//446\nf 418//446 472//446 474//446\nf 473//447 421//447 419//447\nf 473//447 419//447 475//447\nf 458//448 456//448 480//448\nf 458//448 480//448 478//448\nf 481//449 457//449 459//449\nf 481//449 459//449 479//449\nf 478//450 480//450 482//450\nf 478//450 482//450 484//450\nf 483//451 481//451 479//451\nf 483//451 479//451 485//451\nf 484//452 482//452 488//452\nf 484//452 488//452 486//452\nf 489//453 483//453 485//453\nf 489//453 485//453 487//453\nf 486//454 488//454 490//454\nf 486//454 490//454 492//454\nf 491//455 489//455 487//455\nf 491//455 487//455 493//455\nf 464//456 476//456 486//456\nf 464//456 486//456 492//456\nf 487//457 477//457 465//457\nf 487//457 465//457 493//457\nf 452//458 484//458 486//458\nf 452//458 486//458 476//458\nf 487//459 485//459 453//459\nf 487//459 453//459 477//459\nf 452//460 462//460 478//460\nf 452//460 478//460 484//460\nf 479//461 463//461 453//461\nf 479//461 453//461 485//461\nf 458//462 478//462 462//462\nf 458//462 462//462 460//462\nf 463//463 479//463 459//463\nf 463//463 459//463 461//463\nf 454//464 474//464 480//464\nf 454//464 480//464 456//464\nf 481//465 475//465 455//465\nf 481//465 455//465 457//465\nf 472//466 482//466 480//466\nf 472//466 480//466 474//466\nf 481//467 483//467 473//467\nf 481//467 473//467 475//467\nf 470//468 488//468 482//468\nf 470//468 482//468 472//468\nf 483//469 489//469 471//469\nf 483//469 471//469 473//469\nf 468//470 490//470 488//470\nf 468//470 488//470 470//470\nf 489//471 491//471 469//471\nf 489//471 469//471 471//471\nf 466//472 492//472 490//472\nf 466//472 490//472 468//472\nf 491//473 493//473 467//473\nf 491//473 467//473 469//473\nf 464//474 492//474 466//474\nf 467//475 493//475 465//475\nf 392//476 390//476 504//476\nf 392//476 504//476 502//476\nf 505//477 391//477 393//477\nf 505//477 393//477 503//477\nf 394//478 392//478 502//478\nf 394//478 502//478 500//478\nf 503//479 393//479 395//479\nf 503//479 395//479 501//479\nf 396//480 394//480 500//480\nf 396//480 500//480 498//480\nf 501//481 395//481 397//481\nf 501//481 397//481 499//481\nf 398//482 396//482 498//482\nf 398//482 498//482 496//482\nf 499//483 397//483 399//483\nf 499//483 399//483 497//483\nf 400//484 398//484 496//484\nf 400//484 496//484 494//484\nf 497//485 399//485 401//485\nf 497//485 401//485 495//485\nf 388//486 400//486 494//486\nf 388//486 494//486 506//486\nf 495//487 401//487 389//487\nf 495//487 389//487 507//487\nf 494//488 502//488 504//488\nf 494//488 504//488 506//488\nf 505//489 503//489 495//489\nf 505//489 495//489 507//489\nf 494//490 496//490 500//490\nf 494//490 500//490 502//490\nf 501//491 497//491 495//491\nf 501//491 495//491 503//491\nf 496//492 498//492 500//492\nf 501//493 499//493 497//493\nf 314//494 382//494 388//494\nf 314//494 388//494 506//494\nf 389//495 383//495 315//495\nf 389//495 315//495 507//495\nf 314//496 506//496 504//496\nf 314//496 504//496 322//496\nf 505//497 507//497 315//497\nf 505//497 315//497 323//497\nf 320//498 322//498 504//498\nf 320//498 504//498 390//498\nf 505//499 323//499 321//499\nf 505//499 321//499 391//499\n");
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     opt=[0,103],
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     s=caml_string_of_jsbytes("+"),
     s$1=caml_string_of_jsbytes("4.0.0"),
     git_version=caml_string_of_jsbytes("9a8f876"),
     s$2=caml_string_of_jsbytes("monkey.model"),
     f$0=
      [0,
       [11,caml_string_of_jsbytes("can't initialise webgl context"),0],
       caml_string_of_jsbytes("can't initialise webgl context")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _d_=caml_string_of_jsbytes("%.12g"),
     _c_=caml_string_of_jsbytes("."),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _e_=caml_string_of_jsbytes("\\\\"),
     _f_=caml_string_of_jsbytes("\\'"),
     _g_=caml_string_of_jsbytes("\\b"),
     _h_=caml_string_of_jsbytes("\\t"),
     _i_=caml_string_of_jsbytes("\\n"),
     _j_=caml_string_of_jsbytes("\\r"),
     _m_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _l_=caml_string_of_jsbytes("Bytes.blit"),
     _k_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _n_=caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     _o_=caml_string_of_jsbytes("Array.init"),
     _p_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     _s_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _r_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _q_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _B_=caml_string_of_jsbytes("%c"),
     _C_=caml_string_of_jsbytes("%s"),
     _D_=caml_string_of_jsbytes("%i"),
     _E_=caml_string_of_jsbytes("%li"),
     _F_=caml_string_of_jsbytes("%ni"),
     _G_=caml_string_of_jsbytes("%Li"),
     _H_=caml_string_of_jsbytes("%f"),
     _I_=caml_string_of_jsbytes("%B"),
     _J_=caml_string_of_jsbytes("%{"),
     _K_=caml_string_of_jsbytes("%}"),
     _L_=caml_string_of_jsbytes("%("),
     _M_=caml_string_of_jsbytes("%)"),
     _N_=caml_string_of_jsbytes("%a"),
     _O_=caml_string_of_jsbytes("%t"),
     _P_=caml_string_of_jsbytes("%?"),
     _Q_=caml_string_of_jsbytes("%r"),
     _R_=caml_string_of_jsbytes("%_r"),
     _S_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _W_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _X_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _Y_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _Z_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _U_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _V_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bc_=caml_string_of_jsbytes("%u"),
     _ba_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bb_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bd_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _be_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bf_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bg_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bh_=caml_string_of_jsbytes("@{"),
     _bi_=caml_string_of_jsbytes("@["),
     _bj_=caml_string_of_jsbytes("@{"),
     _bk_=caml_string_of_jsbytes("@["),
     _a$_=caml_string_of_jsbytes("nan"),
     _a9_=caml_string_of_jsbytes("neg_infinity"),
     _a__=caml_string_of_jsbytes("infinity"),
     _a8_=caml_string_of_jsbytes("."),
     _aW_=caml_string_of_jsbytes("%+nd"),
     _aX_=caml_string_of_jsbytes("% nd"),
     _aZ_=caml_string_of_jsbytes("%+ni"),
     _a0_=caml_string_of_jsbytes("% ni"),
     _a1_=caml_string_of_jsbytes("%nx"),
     _a2_=caml_string_of_jsbytes("%#nx"),
     _a3_=caml_string_of_jsbytes("%nX"),
     _a4_=caml_string_of_jsbytes("%#nX"),
     _a5_=caml_string_of_jsbytes("%no"),
     _a6_=caml_string_of_jsbytes("%#no"),
     _aV_=caml_string_of_jsbytes("%nd"),
     _aY_=caml_string_of_jsbytes("%ni"),
     _a7_=caml_string_of_jsbytes("%nu"),
     _aJ_=caml_string_of_jsbytes("%+ld"),
     _aK_=caml_string_of_jsbytes("% ld"),
     _aM_=caml_string_of_jsbytes("%+li"),
     _aN_=caml_string_of_jsbytes("% li"),
     _aO_=caml_string_of_jsbytes("%lx"),
     _aP_=caml_string_of_jsbytes("%#lx"),
     _aQ_=caml_string_of_jsbytes("%lX"),
     _aR_=caml_string_of_jsbytes("%#lX"),
     _aS_=caml_string_of_jsbytes("%lo"),
     _aT_=caml_string_of_jsbytes("%#lo"),
     _aI_=caml_string_of_jsbytes("%ld"),
     _aL_=caml_string_of_jsbytes("%li"),
     _aU_=caml_string_of_jsbytes("%lu"),
     _aw_=caml_string_of_jsbytes("%+Ld"),
     _ax_=caml_string_of_jsbytes("% Ld"),
     _az_=caml_string_of_jsbytes("%+Li"),
     _aA_=caml_string_of_jsbytes("% Li"),
     _aB_=caml_string_of_jsbytes("%Lx"),
     _aC_=caml_string_of_jsbytes("%#Lx"),
     _aD_=caml_string_of_jsbytes("%LX"),
     _aE_=caml_string_of_jsbytes("%#LX"),
     _aF_=caml_string_of_jsbytes("%Lo"),
     _aG_=caml_string_of_jsbytes("%#Lo"),
     _av_=caml_string_of_jsbytes("%Ld"),
     _ay_=caml_string_of_jsbytes("%Li"),
     _aH_=caml_string_of_jsbytes("%Lu"),
     _aj_=caml_string_of_jsbytes("%+d"),
     _ak_=caml_string_of_jsbytes("% d"),
     _am_=caml_string_of_jsbytes("%+i"),
     _an_=caml_string_of_jsbytes("% i"),
     _ao_=caml_string_of_jsbytes("%x"),
     _ap_=caml_string_of_jsbytes("%#x"),
     _aq_=caml_string_of_jsbytes("%X"),
     _ar_=caml_string_of_jsbytes("%#X"),
     _as_=caml_string_of_jsbytes("%o"),
     _at_=caml_string_of_jsbytes("%#o"),
     _ai_=caml_string_of_jsbytes("%d"),
     _al_=caml_string_of_jsbytes("%i"),
     _au_=caml_string_of_jsbytes("%u"),
     _t_=caml_string_of_jsbytes("@]"),
     _u_=caml_string_of_jsbytes("@}"),
     _v_=caml_string_of_jsbytes("@?"),
     _w_=caml_string_of_jsbytes("@\n"),
     _x_=caml_string_of_jsbytes("@."),
     _y_=caml_string_of_jsbytes("@@"),
     _z_=caml_string_of_jsbytes("@%"),
     _A_=caml_string_of_jsbytes("@"),
     _ah_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bo_=caml_string_of_jsbytes(""),
     _bp_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bL_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bM_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _bK_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     _bJ_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bH_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bz_=caml_string_of_jsbytes("Raised at"),
     _bA_=caml_string_of_jsbytes("Re-raised at"),
     _bB_=caml_string_of_jsbytes("Raised by primitive operation at"),
     _bC_=caml_string_of_jsbytes("Called from"),
     _bD_=caml_string_of_jsbytes(" (inlined)"),
     _bF_=caml_string_of_jsbytes(""),
     _bE_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _bG_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _bu_=caml_string_of_jsbytes("Out of memory"),
     _bv_=caml_string_of_jsbytes("Stack overflow"),
     _bw_=caml_string_of_jsbytes("Pattern matching failed"),
     _bx_=caml_string_of_jsbytes("Assertion failed"),
     _by_=caml_string_of_jsbytes("Undefined recursive module"),
     _bq_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _br_=caml_string_of_jsbytes(""),
     _bs_=caml_string_of_jsbytes(""),
     _bt_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bn_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bl_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bm_=caml_string_of_jsbytes("_"),
     _bI_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _bN_=caml_string_of_jsbytes("Jsoo_runtime.Error.Exn"),
     _bP_=caml_string_of_jsbytes("script"),
     _bO_=caml_string_of_jsbytes("canvas"),
     _bQ_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/regexp.ml"),34,64],
     _bR_=caml_string_of_jsbytes("[\\][()\\\\|+*.?{}^$]"),
     _bT_=caml_string_of_jsbytes(""),
     _bV_=caml_string_of_jsbytes(""),
     _bS_=caml_string_of_jsbytes("Js_of_ocaml__Url.Local_exn"),
     _bW_=
      caml_string_of_jsbytes
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     _bX_=
      caml_string_of_jsbytes
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     _cJ_=caml_string_of_jsbytes("+"),
     _cf_=[0,0],
     _cg_=[0,1],
     _cd_=[0,0],
     _ce_=[0,1],
     _ca_=[0,0],
     _cb_=[0,0],
     _cc_=[0,1],
     _b__=[0,0],
     _b$_=[0,1],
     _b8_=[0,0],
     _b9_=[0,0],
     _b7_=caml_string_of_jsbytes("wakeup_exn"),
     _b6_=caml_string_of_jsbytes("wakeup"),
     _b3_=
      [0,
       [11,caml_string_of_jsbytes("Lwt."),[2,0,0]],
       caml_string_of_jsbytes("Lwt.%s")],
     _b4_=
      [0,
       [11,caml_string_of_jsbytes("Lwt."),[2,0,0]],
       caml_string_of_jsbytes("Lwt.%s")],
     _b5_=[0,0],
     _b1_=caml_string_of_jsbytes("Fatal error: exception "),
     _b2_=caml_string_of_jsbytes("Lwt.Resolution_loop.Canceled"),
     _cj_=caml_string_of_jsbytes(""),
     _ci_=
      caml_string_of_jsbytes
       ("Js_of_ocaml_lwt__Lwt_xmlHttpRequest.Wrong_headers"),
     _ck_=caml_string_of_jsbytes("Exception during Lwt.async: "),
     _cI_=
      [0,
       [11,caml_string_of_jsbytes("uncaught exception: "),[2,0,0]],
       caml_string_of_jsbytes("uncaught exception: %s")],
     _cH_=
      [0,
       [11,caml_string_of_jsbytes("fetching model"),0],
       caml_string_of_jsbytes("fetching model")],
     _cG_=[0,[8,[0,0,0],0,[0,1],0],caml_string_of_jsbytes("%.1f")],
     _cy_=
      [0,
       [11,caml_string_of_jsbytes("init canvas"),0],
       caml_string_of_jsbytes("init canvas")],
     _cz_=caml_string_of_jsbytes("canvas"),
     _cA_=
      [0,
       [11,caml_string_of_jsbytes("create program"),0],
       caml_string_of_jsbytes("create program")],
     _cB_=caml_string_of_jsbytes("fragment-shader"),
     _cC_=caml_string_of_jsbytes("vertex-shader"),
     _cD_=
      [0,
       [11,caml_string_of_jsbytes("use program"),0],
       caml_string_of_jsbytes("use program")],
     _cE_=
      [0,
       [11,caml_string_of_jsbytes("program loaded"),0],
       caml_string_of_jsbytes("program loaded")],
     _cF_=
      [0,
       [11,caml_string_of_jsbytes("ready"),0],
       caml_string_of_jsbytes("ready")],
     _cx_=caml_string_of_jsbytes("\n"),
     _ct_=[0,1,[0,2,[0,3,[0,4,0]]]],
     _cu_=caml_string_of_jsbytes("f"),
     _cv_=caml_string_of_jsbytes("v"),
     _cw_=caml_string_of_jsbytes("vn"),
     _cs_=[0,1,[0,2,0]],
     _cp_=
      [0,
       [11,caml_string_of_jsbytes("can't find script element "),[2,0,0]],
       caml_string_of_jsbytes("can't find script element %s")],
     _co_=
      [0,
       [11,caml_string_of_jsbytes("Unable to link the shader program."),0],
       caml_string_of_jsbytes("Unable to link the shader program.")],
     _cn_=
      [0,
       [11,
        caml_string_of_jsbytes("An error occurred compiling the shaders: \n"),
        [2,0,[12,10,[2,0,0]]]],
       caml_string_of_jsbytes
        ("An error occurred compiling the shaders: \n%s\n%s")],
     _cm_=
      [0,
       [11,caml_string_of_jsbytes("can't find canvas element "),[2,0,0]],
       caml_string_of_jsbytes("can't find canvas element %s")],
     _cl_=
      [0,
       [11,caml_string_of_jsbytes("WebGL error"),0],
       caml_string_of_jsbytes("WebGL error")],
     _cq_=
      caml_string_of_jsbytes("(v|vn|f)\\ ([^\\ ]+)\\ ([^\\ ]+)\\ ([^\\ ]+)"),
     _cr_=caml_string_of_jsbytes("([0-9]+)//([0-9]+)");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    function abs(x){return 0 <= x?x:- x | 0}
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    var stderr=caml_ml_open_descriptor_out(2);
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_hc_)
             {_hc_ = caml_wrap_exception(_hc_);
              if(_hc_[1] !== Sys_error)throw _hc_;
              var _hb_=_hc_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    var
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    function rev(l)
     {var l1=l,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_k_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_l_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_m_)}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function index_from(s,i$1,c)
     {var lim=caml_ml_string_length(s);
      if(0 <= i$1 && ! (lim < i$1))
       {var i=i$1;
        for(;;)
         {if(lim <= i)throw Not_found;
          if(caml_string_unsafe_get(s,i) === c)return i;
          var i$0=i + 1 | 0,i=i$0;
          continue}}
      return invalid_arg(_n_)}
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_g$_=l - 1 | 0,_g__=1;
        if(! (_g$_ < 1))
         {var i=_g__;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _ha_=i + 1 | 0;
            if(_g$_ !== i){var i=_ha_;continue}
            break}}
        return res}
      return invalid_arg(_o_)}
    function of_list(l)
     {if(l)
       {var tl=l[2],hd=l[1],accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,hd),i=1,param$1=tl;
          for(;;)
           {if(param$1)
             {var tl$0=param$1[2],hd$0=param$1[1];
              a[1 + i] = hd$0;
              var i$0=i + 1 | 0,i=i$0,param$1=tl$0;
              continue}
            return a}}}
      return [0]}
    var Empty=[248,_p_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0,0]}
    function add(x,q)
     {var cell=[0,x,0],_g9_=q[3];
      return _g9_
              ?(q[1] = q[1] + 1 | 0,_g9_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function take(q)
     {var _g7_=q[2];
      if(_g7_)
       {var _g8_=_g7_[1];
        if(_g7_[2])
         {var next=_g7_[2];q[1] = q[1] - 1 | 0;q[2] = next;return _g8_}
        q[1] = 0;
        q[2] = 0;
        q[3] = 0;
        return _g8_}
      throw Empty}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_s_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_q_]}
        throw [0,Assert_failure,_r_]}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _g5_=len < y?1:0;
      if(_g5_)
       {var
         x=len * 2 | 0,
         new_len=y <= x?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _g6_=0}
      else
       var _g6_=_g5_;
      return _g6_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _t_;
         case 1:return _u_;
         case 2:return _v_;
         case 3:return _w_;
         case 4:return _x_;
         case 5:return _y_;
         default:return _z_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return cat(_A_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_B_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_C_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_D_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_E_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_F_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_G_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_H_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_I_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_J_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_K_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_L_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_M_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof ty2 === "number")
        return 0;
       else
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_S_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_gM_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_gM_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_gN_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_gN_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_gO_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_gO_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_gP_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_gP_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_gQ_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_gQ_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_gR_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_gR_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_gS_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_gS_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_gT_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_gT_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_gU_=ty1[2],_gV_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_gW_=trans(_gU_,rest2$7);
              return [8,trans(_gV_,ty2$0),_gW_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_aa_];
          break;
         case 9:
          var switch$10=0,_gX_=ty1[3],_gY_=ty1[2],_gZ_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               ty=trans(symm(_gY_),ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_gZ_,ty22,trans(_gX_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ab_];
          break;
         case 10:
          var _g0_=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_g0_,rest2$9)]}
          throw [0,Assert_failure,_ac_];
         case 11:
          var switch$11=0,_g1_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_g1_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ad_];
          break;
         case 12:
          var switch$12=0,_g2_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_g2_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_ae_];
          break;
         case 13:
          var switch$13=0,_g3_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_g3_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_af_];
          break;
         default:
          var switch$14=0,_g4_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_g4_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ag_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_W_];
        case 1:throw [0,Assert_failure,_X_];
        case 2:throw [0,Assert_failure,_Y_];
        case 3:throw [0,Assert_failure,_Z_];
        case 4:throw [0,Assert_failure,___];
        case 5:throw [0,Assert_failure,_U_];
        case 6:throw [0,Assert_failure,_V_];
        default:throw [0,Assert_failure,_$_]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _go_=function(param){return 0},
         _gp_=function(param){return 0},
         _gq_=function(param){return 0};
        return [0,function(param){return 0},_gq_,_gp_,_go_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _gr_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_gr_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _gs_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _gs_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _gt_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _gt_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _gu_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _gu_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _gv_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _gv_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _gw_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _gw_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _gx_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _gx_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _gy_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _gy_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _gz_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _gz_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _gA_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _gB_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _gC_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _gC_,
                  _gB_,
                  _gA_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _gD_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _gD_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _gE_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _gE_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _gF_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _gF_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _gG_=function(param){caml_call1(de$12,0);return 0},
           _gH_=function(param){caml_call1(ed$12,0);return 0},
           _gI_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _gI_,
                  _gH_,
                  _gG_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _gJ_=function(param){caml_call1(de$13,0);return 0},
           _gK_=function(param){caml_call1(ed$13,0);return 0},
           _gL_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _gL_,
                  _gK_,
                  _gJ_]}}
    var Type_mismatch=[248,_ah_,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")
       return [0,0,fmtty];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _gn_=match[2];
          if(typeof _gn_ !== "number" && 2 === _gn_[0])
           {var rest=_gn_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             sub_fmtty_rest=sub_fmtty[1],
             match=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match[2],
             sub_fmtty_rest$0=match[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$0[2],
             sub_fmtty_rest$2=match$0[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$1=fmtty[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$1[2],
             sub_fmtty_rest$4=match$1[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof fmtty !== "number" && 3 === fmtty[0])
           {var
             fmtty_rest$2=fmtty[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$2[2],
             sub_fmtty_rest$6=match$2[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof fmtty !== "number" && 4 === fmtty[0])
           {var
             fmtty_rest$3=fmtty[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$3[2],
             sub_fmtty_rest$8=match$3[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof fmtty !== "number" && 5 === fmtty[0])
           {var
             fmtty_rest$4=fmtty[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$4[2],
             sub_fmtty_rest$10=match$4[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof fmtty !== "number" && 6 === fmtty[0])
           {var
             fmtty_rest$5=fmtty[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$5[2],
             sub_fmtty_rest$12=match$5[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$6=fmtty[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$6[2],
             sub_fmtty_rest$14=match$6[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$7=fmtty[2],
             sub2_fmtty=fmtty[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$7[2],
             sub_fmtty_rest$16=match$7[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[3],
             sub2_fmtty$1=fmtty[2],
             sub1_fmtty=fmtty[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _gl_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_gl_))
             throw Type_mismatch;
            var _gm_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_gm_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$8=fmtty_rel_det(sub_fmtty$0),
             f4=match$8[4],
             f2=match$8[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$9=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$9[2],
             sub_fmtty_rest$18=match$9[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$10=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$10[2],
             sub_fmtty_rest$20=match$10[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$11[2],
             sub_fmtty_rest$22=match$11[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$12[2],
             sub_fmtty_rest$24=match$12[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$13[2],
             sub_fmtty_rest$26=match$13[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _f6_=match$1[2],
           _f5_=match$1[1];
          if(typeof _f6_ !== "number" && 1 === _f6_[0])
           {var
             fmtty_rest$1=_f6_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_f5_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _f8_=match$3[2],
           _f7_=match$3[1];
          if(typeof _f8_ !== "number" && 1 === _f8_[0])
           {var
             fmtty_rest$2=_f8_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_f7_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _f__=match$5[3],
           _f9_=match$5[1];
          if(typeof _f__ !== "number" && 2 === _f__[0])
           {var
             fmtty_rest$3=_f__[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_f9_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _ga_=match$7[3],
           _f$_=match$7[1];
          if(typeof _ga_ !== "number" && 3 === _ga_[0])
           {var
             fmtty_rest$4=_ga_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_f$_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _gc_=match$9[3],
           _gb_=match$9[1];
          if(typeof _gc_ !== "number" && 4 === _gc_[0])
           {var
             fmtty_rest$5=_gc_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_gb_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _ge_=match$11[3],
           _gd_=match$11[1];
          if(typeof _ge_ !== "number" && 5 === _ge_[0])
           {var
             fmtty_rest$6=_ge_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_gd_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _gg_=match$13[3],
           _gf_=match$13[1];
          if(typeof _gg_ !== "number" && 6 === _gg_[0])
           {var
             fmtty_rest$7=_gg_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_gf_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _gi_=match$15[2],
           _gh_=match$15[1];
          if(typeof _gi_ !== "number" && 7 === _gi_[0])
           {var
             fmtty_rest$8=_gi_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_gh_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _gj_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_gj_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _gk_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_gk_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_gk_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _f4_=2 === padty$0?48:32,res=make(width$0,_f4_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < c - 97 >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          switch(c - 43 | 0)
           {case 5:
             if(len < (prec$0 + 2 | 0) && 1 < len)
              {var switch$2=0;
               if
                (120
                 ===
                 caml_string_get(str,1)
                 ||
                 88
                 ===
                 caml_string_get(str,1))
                switch$2 = 1;
               if(switch$2)
                {var res$1=make(prec$0 + 2 | 0,48);
                 caml_bytes_set(res$1,1,caml_string_get(str,1));
                 blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                 return caml_string_of_bytes(res$1)}}
             switch$0 = 1;
             switch$1 = 1;
             break;
            case 0:
            case 2:break;
            case 1:
            case 3:
            case 4:switch$1 = 1;break;
            default:switch$0 = 1;switch$1 = 1}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _f2_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _f2_ >>> 0)
           {if(33 < _f2_ - 61 >>> 0)switch$0 = 1}
          else
           if(2 === _f2_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _fV_=caml_ml_bytes_length(s$0) - 1 | 0,
           _fU_=0;
          if(! (_fV_ < 0))
           {var i$0=_fU_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _fZ_=match - 34 | 0,switch$2=0;
                if(58 < _fZ_ >>> 0)
                 {if(93 <= _fZ_)switch$2 = 1}
                else
                 if(56 < _fZ_ - 1 >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _f0_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _f0_=4;break;case 1:var _f0_=2;break}
              n[1] = n[1] + _f0_ | 0;
              var _f1_=i$0 + 1 | 0;
              if(_fV_ !== i$0){var i$0=_f1_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           {var len=caml_ml_bytes_length(s$0),r=caml_create_bytes(len);
            caml_blit_bytes(s$0,0,r,0,len);
            var _f3_=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _fX_=caml_ml_bytes_length(s$0) - 1 | 0,_fW_=0;
            if(! (_fX_ < 0))
             {var i=_fW_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _fY_=i + 1 | 0;
                if(_fX_ !== i){var i=_fY_;continue}
                break}}
            var _f3_=s}
          var str$0=caml_string_of_bytes(_f3_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec),sth=opt[1];
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=sth;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_fP_=caml_ml_string_length(s) - 1 | 0,_fO_=0;
        if(! (_fP_ < 0))
         {var i$0=_fO_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0);
            if(! (9 < match - 48 >>> 0))n[1]++;
            var _fT_=i$0 + 1 | 0;
            if(_fP_ !== i$0){var i$0=_fT_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _fR_=caml_ml_string_length(s) - 1 | 0,
         _fQ_=0;
        if(! (_fR_ < 0))
         {var i=_fQ_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i);
            if(9 < c - 48 >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _fS_=i + 1 | 0;
            if(_fR_ !== i){var i=_fS_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _fN_=_aj_;break;
        case 2:var _fN_=_ak_;break;
        case 4:var _fN_=_am_;break;
        case 5:var _fN_=_an_;break;
        case 6:var _fN_=_ao_;break;
        case 7:var _fN_=_ap_;break;
        case 8:var _fN_=_aq_;break;
        case 9:var _fN_=_ar_;break;
        case 10:var _fN_=_as_;break;
        case 11:var _fN_=_at_;break;
        case 0:
        case 13:var _fN_=_ai_;break;
        case 3:
        case 14:var _fN_=_al_;break;
        default:var _fN_=_au_}
      return transform_int_alt(iconv,caml_format_int(_fN_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _fM_=_aJ_;break;
        case 2:var _fM_=_aK_;break;
        case 4:var _fM_=_aM_;break;
        case 5:var _fM_=_aN_;break;
        case 6:var _fM_=_aO_;break;
        case 7:var _fM_=_aP_;break;
        case 8:var _fM_=_aQ_;break;
        case 9:var _fM_=_aR_;break;
        case 10:var _fM_=_aS_;break;
        case 11:var _fM_=_aT_;break;
        case 0:
        case 13:var _fM_=_aI_;break;
        case 3:
        case 14:var _fM_=_aL_;break;
        default:var _fM_=_aU_}
      return transform_int_alt(iconv,caml_format_int(_fM_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _fL_=_aW_;break;
        case 2:var _fL_=_aX_;break;
        case 4:var _fL_=_aZ_;break;
        case 5:var _fL_=_a0_;break;
        case 6:var _fL_=_a1_;break;
        case 7:var _fL_=_a2_;break;
        case 8:var _fL_=_a3_;break;
        case 9:var _fL_=_a4_;break;
        case 10:var _fL_=_a5_;break;
        case 11:var _fL_=_a6_;break;
        case 0:
        case 13:var _fL_=_aV_;break;
        case 3:
        case 14:var _fL_=_aY_;break;
        default:var _fL_=_a7_}
      return transform_int_alt(iconv,caml_format_int(_fL_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _fK_=_aw_;break;
        case 2:var _fK_=_ax_;break;
        case 4:var _fK_=_az_;break;
        case 5:var _fK_=_aA_;break;
        case 6:var _fK_=_aB_;break;
        case 7:var _fK_=_aC_;break;
        case 8:var _fK_=_aD_;break;
        case 9:var _fK_=_aE_;break;
        case 10:var _fK_=_aF_;break;
        case 11:var _fK_=_aG_;break;
        case 0:
        case 13:var _fK_=_av_;break;
        case 3:
        case 14:var _fK_=_ay_;break;
        default:var _fK_=_aH_}
      return transform_int_alt(iconv,caml_int64_format(_fK_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_a9_:_a__:4 <= match?_a$_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _fI_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _fH_=match - 46 | 0,
              switch$0=0;
             if(23 < _fH_ >>> 0)
              {if(55 === _fH_)switch$0 = 1}
             else
              if(21 < _fH_ - 1 >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _fI_=1}
           var _fJ_=_fI_?str:cat(str,_a8_);
           return caml_special_val(_fJ_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _fG_=s;
         else
          {var r=caml_create_bytes(l),_fD_=l - 1 | 0,_fC_=0;
           if(! (_fD_ < 0))
            {var i=_fC_;
             for(;;)
              {var
                c=caml_bytes_unsafe_get(s,i),
                _fE_=25 < c - 97 >>> 0?c:c - 32 | 0;
               caml_bytes_unsafe_set(r,i,_fE_);
               var _fF_=i + 1 | 0;
               if(_fD_ !== i){var i=_fF_;continue}
               break}}
           var _fG_=r}
         return caml_string_of_bytes(_fG_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_e_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_f_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_g_;break;
                  case 9:var str=_h_;break;
                  case 10:var str=_i_;break;
                  case 13:var str=_j_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _fy_=pad$5[2],_fz_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_fz_,_fy_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_fz_,_fy_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_fz_,_fy_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _fA_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_fA_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_fA_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_fA_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _fB_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _fB_[2] === "number")
              {var fmt=_fB_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _fw_=fmt$0[1];
           if(0 === _fw_[0])
            {var
              rest$13=fmt$0[2],
              match=_fw_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_fw_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_ba_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bb_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bc_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bd_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _fx_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_fx_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_fx_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_fv_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_be_];
         default:throw [0,Assert_failure,_bf_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _fu_=[8,acc,_bg_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_fu_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_fu_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _ft_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_ft_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_ft_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _fq_=pad[2],_fr_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_fr_,_fq_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_fr_,_fq_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             str=
              fix_padding
               (_fr_,_fq_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _fs_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_fs_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_fs_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_fs_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _fo_=acc$0[2],_fp_=acc$0[1];
           if(0 === _fo_[0])
            {var acc$1=_fo_[1];
             output_acc(o,_fp_);
             output_string(o,_bh_);
             var acc$0=acc$1;
             continue}
           var acc$2=_fo_[1];
           output_acc(o,_fp_);
           output_string(o,_bi_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _fm_=acc$0[2],_fn_=acc$0[1];
           if(0 === _fm_[0])
            {var acc$1=_fm_[1];
             strput_acc(b,_fn_);
             add_string(b,_bj_);
             var acc$0=acc$1;
             continue}
           var acc$2=_fm_[1];
           strput_acc(b,_fn_);
           add_string(b,_bk_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_fl_=0;
      return make_printf(function(acc){output_acc(oc,acc);return 0},_fl_,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return caml_call1(k,sub_string(buf[1],0,buf[2]))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var r=[0,0];
    function field(x,i$1)
     {var a=x[1 + i$1];
      if(1 - (typeof a === "number"?1:0))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bl_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_d_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return cat(s,_c_);
            var match=caml_string_get(s,i),switch$0=0;
            if(48 <= match)
             {if(! (58 <= match))switch$0 = 1}
            else
             if(45 === match)switch$0 = 1;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bm_}
      return caml_call1(sprintf(_bn_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bo_;
      var _fj_=other_fields(x,i + 1 | 0),_fk_=field(x,i);
      return caml_call2(sprintf(_bp_),_fk_,_fj_)}
    function to_string(e)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,e);switch$0 = 1}
            catch(_fi_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      var match$0=conv(r[1]);
      if(match$0){var s=match$0[1];return s}
      if(e === Out_of_memory)return _bu_;
      if(e === Stack_overflow)return _bv_;
      if(e[1] === Match_failure)
       {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bw_)}
      if(e[1] === Assert_failure)
       {var
         match$2=e[2],
         char$1=match$2[3],
         line$0=match$2[2],
         file$0=match$2[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bx_)}
      if(e[1] === Undefined_recursive_module)
       {var
         match$3=e[2],
         char$2=match$3[3],
         line$1=match$3[2],
         file$1=match$3[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_by_)}
      if(0 === caml_obj_tag(e))
       {var constructor=e[1][1],match=e.length - 1;
        if(2 < match >>> 0)
         var
          _fe_=other_fields(e,2),
          _ff_=field(e,1),
          _fh_=caml_call2(sprintf(_bq_),_ff_,_fe_);
        else
         switch(match)
          {case 0:var _fh_=_br_;break;
           case 1:var _fh_=_bs_;break;
           default:var _fg_=field(e,1),_fh_=caml_call1(sprintf(_bt_),_fg_)}
        return cat(constructor,_fh_)}
      return e[1]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var
       a=caml_convert_raw_backtrace(raw_backtrace),
       _fc_=a.length - 1 - 1 | 0,
       _fb_=0;
      if(! (_fc_ < 0))
       {var i=_fb_;
        for(;;)
         {var
           slot=caml_check_bound(a,i)[1 + i],
           info$0=
            function(i)
             {function info(is_raise)
               {return is_raise?0 === i?_bz_:_bA_:0 === i?_bB_:_bC_}
              return info},
           info=info$0(i);
          if(0 === slot[0])
           var
            _e5_=slot[5],
            _e6_=slot[4],
            _e7_=slot[3],
            _e8_=slot[6]?_bD_:_bF_,
            _e9_=slot[2],
            _e__=slot[7],
            _e$_=info(slot[1]),
            match=
             [0,caml_call7(sprintf(_bE_),_e$_,_e__,_e9_,_e8_,_e7_,_e6_,_e5_)];
          else
           if(slot[1])
            var match=0;
           else
            var _fa_=info(0),match=[0,caml_call1(sprintf(_bG_),_fa_)];
          if(match){var str=match[1];caml_call1(fprintf(outchan,_bH_),str)}
          var _fd_=i + 1 | 0;
          if(_fc_ !== i){var i=_fd_;continue}
          break}}
      return 0}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtrace(0))}
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=r[1],
         v=[0,fn,old_printers],
         cur=r[1],
         success=cur === old_printers?(r[1] = v,1):0,
         _e4_=1 - success;
        if(_e4_)continue;
        return _e4_}}
    var errors=_bI_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _e2_=to_string(exn);
      caml_call1(eprintf(_bJ_),_e2_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=caml_ml_debug_info_status(0);
      if(status < 0)
       {var _e3_=abs(status);
        prerr_endline(caml_check_bound(errors,_e3_)[1 + _e3_])}
      return caml_ml_flush(stderr)}
    var empty_backtrace=[0];
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {try
         {var
           raw_backtrace=
            debugger_in_use
             ?empty_backtrace
             :caml_get_exception_raw_backtrace(0);
          try {do_at_exit(0)}catch(_e1_){}
          try
           {var
             _eX_=default_uncaught_exception_han(exn,raw_backtrace),
             _eW_=_eX_}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            var
             raw_backtrace$0=caml_get_exception_raw_backtrace(0),
             _eU_=to_string(exn);
            caml_call1(eprintf(_bL_),_eU_);
            print_raw_backtrace(stderr,raw_backtrace);
            var _eV_=to_string(exn$0);
            caml_call1(eprintf(_bM_),_eV_);
            print_raw_backtrace(stderr,raw_backtrace$0);
            var _eW_=caml_ml_flush(stderr)}
          var _eY_=_eW_}
        catch(_e0_)
         {_e0_ = caml_wrap_exception(_e0_);
          if(_e0_ !== Out_of_memory)throw _e0_;
          var _eY_=prerr_endline(_bK_)}
        return _eY_}
      catch(_eZ_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception);
    var
     Error=[248,_bN_,caml_fresh_oo_id(0)],
     exn=[0,Error,[0]],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_string_of_jsbytes("jsError"),slot);
    (function(exn){throw exn});
    var t141=globalThis,t58=null,t39=undefined;
    function bind(x,f){return x == t58?t58:caml_call1(f,x)}
    function test(x){return 1 - (x == t58?1:0)}
    function case$0(x,f,g){return x == t58?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == t58?caml_call1(f,0):x}
    function to_option(x)
     {function _eT_(x){return [0,x]}
      return case$0(x,function(param){return 0},_eT_)}
    function case$1(x,f,g){return x === t39?caml_call1(f,0):caml_call1(g,x)}
    var
     t11=true,
     t125=false,
     t22=t141.RegExp,
     array_length=t141.Array,
     t122=t141.Date;
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length
                ?0
                :[0,caml_string_of_jsstring(e.toString())]});
    var
     t44=t141.Float32Array,
     onIE=caml_js_on_ie(0) | 0,
     t48=t141.document,
     html_element=t141.HTMLElement,
     element=
      html_element === t39
       ?function(e){return e.innerHTML === t39?t58:e}
       :function(e){return e instanceof html_element?e:t58};
    function unsafeCoerce(tag,e)
     {var t56=e.tagName,_eS_=caml_jsstring_of_string(tag);
      return t56.toLowerCase() === _eS_?e:t58}
    function canvas(e){return unsafeCoerce(_bO_,e)}
    function script(e){return unsafeCoerce(_bP_,e)}
    ({"alpha":t11,
      "depth":t11,
      "stencil":t125,
      "antialias":t11,
      "premultipliedAlpha":t125,
      "preserveDrawingBuffer":t125,
      "preferLowPowerToHighPerformance":t125,
      "failIfMajorPerformanceCaveat":t125});
    var overflow_limit=2147483000.;
    function getContext(t3)
     {var ctx=t3.getContext("webgl");
      return test(ctx)?ctx:t3.getContext("experimental-webgl")}
    function regexp(s)
     {var t0=caml_jsbytes_of_string(s);return new t22(t0,"g")}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var t11=caml_jsbytes_of_string(s),x=r.exec(t11),_eR_=x == t58?t58:x;
      return to_option(_eR_)}
    function matched_group(r,i)
     {var x=r[i],_eQ_=x === t39?t39:caml_string_of_jsbytes(x);
      function _eP_(x){return [0,x]}
      return case$1(_eQ_,function(param){return 0},_eP_)}
    new t22("[$]","g");
    var t48$0=regexp(_bR_),Local_exn=[248,_bS_,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var t50=caml_jsbytes_of_string(s);
    regexp(caml_string_of_jsbytes(t50.replace(t48$0,"\\$&")));
    var t14=new t22("\\+","g");
    function urldecode_js_string_string(s$0)
     {t14.lastIndex = 0;
      var s=s$0.replace(t14," ");
      return caml_string_of_jsbytes(t141.unescape(s))}
    var t19=caml_jsbytes_of_string(_bW_);
    new t22(t19);
    var t21=caml_jsbytes_of_string(_bX_);
    new t22(t21);
    var x=t141.location;
    if(x !== t39)
     var _bY_=t141.location;
    else
     var
      t42=function(param,_eO_){return 0},
      t41=function(param,_eN_){return 0},
      t40=function(param){return 0},
      _bY_=
       {"href":"",
        "protocol":"",
        "host":"",
        "hostname":"",
        "port":"",
        "pathname":"",
        "search":"",
        "hash":"",
        "origin":t39,
        "reload":caml_js_wrap_meth_callback(t40),
        "replace":caml_js_wrap_meth_callback(t41),
        "assign":caml_js_wrap_meth_callback(t42)};
    urldecode_js_string_string(_bY_.hostname);
    urldecode_js_string_string(_bY_.protocol);
    var _bZ_=0;
    (function(param)
       {try
         {var _eL_=[0,caml_int_of_string(caml_string_of_jsbytes(_bY_.port))];
          return _eL_}
        catch(_eM_)
         {_eM_ = caml_wrap_exception(_eM_);
          if(_eM_[1] === Failure)return 0;
          throw _eM_}}
      (_bZ_));
    var
     s$0=urldecode_js_string_string(_bY_.pathname),
     l=caml_ml_string_length(s$0);
    function aux(i)
     {try
       {var _eJ_=index_from(s$0,i,47),j=_eJ_}
      catch(_eK_)
       {_eK_ = caml_wrap_exception(_eK_);
        if(_eK_ !== Not_found)throw _eK_;
        var j=l}
      var word=sub$0(s$0,i,j - i | 0);
      return l <= j?[0,word,0]:[0,word,aux(j + 1 | 0)]}
    var a=aux(0),switch$0=0;
    if(a && ! caml_string_notequal(a[1],_bT_))
     {var _bU_=a[2];
      if(! _bU_ || ! caml_string_notequal(_bU_[1],_bV_) && ! _bU_[2])
       switch$0 = 1}
    var t49=_bY_.search;
    if(t49.charAt(0) === "?")
     var t52=_bY_.search,_b0_=t52.slice(1);
    else
     var _b0_=_bY_.search;
    var
     t0=caml_jsstring_of_string(make$0(1,38)),
     t18=_b0_.split(t0),
     len=t18.length;
    function aux$0(acc,idx)
     {var idx$0=idx;
      for(;;)
       {if(idx$0 < 0)return acc;
        try
         {var
           _eB_=idx$0 - 1 | 0,
           _eC_=
            function(s)
             {function _eH_(param)
               {var y=param[2],x=param[1],_eI_=urldecode_js_string_string(y);
                return [0,urldecode_js_string_string(x),_eI_]}
              var t2=caml_jsstring_of_string(make$0(1,61)),t5=s.indexOf(t2);
              if(t5 < 0)
               var _eG_=t39;
              else
               var t7=t5 + 1 | 0,_eF_=s.slice(t7),_eG_=[0,s.slice(0,t5),_eF_];
              return case$1(_eG_,interrupt,_eH_)},
           _eD_=aux$0([0,case$1(t18[idx$0],interrupt,_eC_),acc],_eB_);
          return _eD_}
        catch(_eE_)
         {_eE_ = caml_wrap_exception(_eE_);
          if(_eE_ === Local_exn){var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
          throw _eE_}}}
    aux$0(0,len - 1 | 0);
    urldecode_js_string_string(_bY_.href);
    cat(s$1,cat(_cJ_,git_version));
    var t3=caml_js_get_console(0);
    function create$0(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var empty=0;
    function underlying(p)
     {var _eA_=p[1];
      switch(_eA_[0])
       {case 0:return p;
        case 1:return p;
        case 2:return p;
        default:
         var p$0=_eA_[1],p$1=underlying(p$0);
         if(1 - (p$1 === p$0?1:0))p[1] = [3,p$1];
         return p$1}}
    function set_promise_state(p,state){p[1] = state;return p}
    var current_storage=[0,empty];
    function concat_regular_callbacks(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]}
    function clean_up_callback_cells(callbacks)
     {if(typeof callbacks !== "number")
       switch(callbacks[0])
        {case 0:
          var
           l2=callbacks[2],
           l1=callbacks[1],
           l1$0=clean_up_callback_cells(l1),
           l2$0=clean_up_callback_cells(l2);
          return concat_regular_callbacks(l1$0,l2$0);
         case 2:if(! callbacks[1][1])return 0;break
         }
      return callbacks}
    function add_implicitly_removed_callbac(callbacks,f)
     {var
       node$0=[1,f],
       _ez_=callbacks[1],
       node=typeof _ez_ === "number"?node$0:[0,node$0,_ez_];
      callbacks[1] = node;
      return 0}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_b1_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function handle_with_async_exception_ho(f,v)
     {try
       {var _ey_=caml_call1(f,v);return _ey_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    var Canceled=[248,_b2_,caml_fresh_oo_id(0)];
    function run_callbacks(callbacks,result)
     {if(1 === result[0])
       var _ew_=result[1] === Canceled?1:0,is_canceled=_ew_;
      else
       var is_canceled=0;
      if(is_canceled)
       {var
         _eu_=callbacks[2],
         iter_callback_list$2=
          function(counter,fs,rest)
           {var fs$0=fs,rest$0=rest;
            for(;;)
             if(typeof fs$0 === "number")
              {if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return iter_list$0(counter$0,rest$0)}
               return caml_trampoline_return(iter_list$0,[0,rest$0])}
             else
              switch(fs$0[0])
               {case 0:
                 var
                  fs$1=fs$0[2],
                  fs$2=fs$0[1],
                  rest$1=[0,fs$1,rest$0],
                  fs$0=fs$2,
                  rest$0=rest$1;
                 continue;
                case 1:
                 var f=fs$0[2],storage=fs$0[1];
                 current_storage[1] = storage;
                 handle_with_async_exception_ho(f,0);
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return iter_list$0(counter$1,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0]);
                default:
                 var node=fs$0[1];
                 if(node[4])
                  {node[4] = 0;node[1][2] = node[2];node[2][1] = node[1]}
                 if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return iter_list$0(counter$2,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0])}},
         iter_list$0=
          function(counter,rest)
           {if(rest)
             {var rest$0=rest[2],fs=rest[1];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return iter_callback_list$2(counter$0,fs,rest$0)}
              return caml_trampoline_return
                      (iter_callback_list$2,[0,fs,rest$0])}
            return 0},
         iter_callback_list=
          function(fs,rest)
           {return caml_trampoline(iter_callback_list$2(0,fs,rest))};
        iter_callback_list(_eu_,0)}
      var _ev_=callbacks[1];
      function iter_callback_list$1(counter,fs,rest)
       {var fs$0=fs,rest$0=rest;
        for(;;)
         if(typeof fs$0 === "number")
          {if(counter < 50)
            {var counter$0=counter + 1 | 0;return iter_list(counter$0,rest$0)}
           return caml_trampoline_return(iter_list,[0,rest$0])}
         else
          switch(fs$0[0])
           {case 0:
             var
              fs$1=fs$0[2],
              fs$2=fs$0[1],
              rest$1=[0,fs$1,rest$0],
              fs$0=fs$2,
              rest$0=rest$1;
             continue;
            case 1:
             var f=fs$0[1];
             caml_call1(f,result);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return iter_list(counter$1,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0]);
            default:
             var _ex_=fs$0[1][1];
             if(_ex_)
              {var f$0=_ex_[1];
               caml_call1(f$0,result);
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return iter_list(counter$2,rest$0)}
               return caml_trampoline_return(iter_list,[0,rest$0])}
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return iter_list(counter$3,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0])}}
      function iter_list(counter,rest)
       {if(rest)
         {var rest$0=rest[2],fs=rest[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return iter_callback_list$1(counter$0,fs,rest$0)}
          return caml_trampoline_return(iter_callback_list$1,[0,fs,rest$0])}
        return 0}
      function iter_callback_list$0(fs,rest)
       {return caml_trampoline(iter_callback_list$1(0,fs,rest))}
      return iter_callback_list$0(_ev_,0)}
    var
     current_callback_nesting_depth=[0,0],
     q=create(0),
     default_maximum_callback_nesti=42;
    function run_in_resolution_loop(f)
     {current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      +
      1
      |
      0;
      var storage_snapshot=current_storage[1],result$0=caml_call1(f,0);
      if(1 === current_callback_nesting_depth[1])
       for(;;)
        {if(0 !== q[1])
          {var match=take(q),result=match[2],callbacks=match[1];
           run_callbacks(callbacks,result);
           continue}
         break}
      current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      -
      1
      |
      0;
      current_storage[1] = storage_snapshot;
      return result$0}
    function resolve
     (allow_deferring$0,maximum_callback_nesting_depth$0,p,result)
     {var match=p[1],callbacks=match[1],p$0=set_promise_state(p,result);
      if(allow_deferring$0)
       var sth=allow_deferring$0[1],allow_deferring=sth;
      else
       var allow_deferring=1;
      if(maximum_callback_nesting_depth$0)
       var
        sth$0=maximum_callback_nesting_depth$0[1],
        maximum_callback_nesting_depth=sth$0;
      else
       var maximum_callback_nesting_depth=default_maximum_callback_nesti;
      var
       should_defer=
        allow_deferring
         ?maximum_callback_nesting_depth <= current_callback_nesting_depth[1]
           ?1
           :0
         :allow_deferring;
      if(should_defer)
       add([0,callbacks,result],q);
      else
       run_in_resolution_loop
        (function(param){return run_callbacks(callbacks,result)});
      return p$0}
    function run_callback_or_defer_it(opt,f,if_deferred)
     {if(opt)
       var sth=opt[1],run_immediately_and_ensure_tai=sth;
      else
       var run_immediately_and_ensure_tai=0;
      if(run_immediately_and_ensure_tai)return caml_call1(f,0);
      var should_defer=42 <= current_callback_nesting_depth[1]?1:0;
      if(should_defer)
       {var
         match=caml_call1(if_deferred,0),
         deferred_result=match[3],
         deferred_callback=match[2],
         immediate_result=match[1],
         deferred_record=[0,[1,deferred_callback],0,0,0];
        add([0,deferred_record,deferred_result],q);
        return immediate_result}
      return run_in_resolution_loop(function(param){return caml_call1(f,0)})}
    function wakeup_general(api_function_name,p,result)
     {var p$0=underlying(p),_et_=p$0[1];
      switch(_et_[0])
       {case 1:
         return _et_[1] === Canceled
                 ?0
                 :caml_call1(ksprintf(invalid_arg,_b4_),api_function_name);
        case 2:
         if(0 === result[0])
          var x=result[1],result$0=[0,x];
         else
          var exn=result[1],result$0=[1,exn];
         resolve(_b5_,0,p$0,result$0);
         return 0;
        default:
         return caml_call1(ksprintf(invalid_arg,_b3_),api_function_name)}}
    function wakeup(r,v){return wakeup_general(_b6_,r,[0,v])}
    function return$0(v){return [0,[0,v]]}
    function fail(exn){return [0,[1,exn]]}
    function new_pending(how_to_cancel)
     {var state=[2,[0,0,0,how_to_cancel,0]];return [0,state]}
    function task(param){var p=new_pending(1);return [0,p,p]}
    function make_into_proxy(outer_promise,user_provided_promise)
     {var p=underlying(user_provided_promise);
      if(p === outer_promise)return p;
      var _es_=p[1];
      switch(_es_[0])
       {case 1:return resolve(_b9_,0,outer_promise,p[1]);
        case 2:
         var
          p_callbacks=_es_[1],
          match=outer_promise[1],
          outer_callbacks=match[1],
          regular_callbacks=
           concat_regular_callbacks(outer_callbacks[1],p_callbacks[1]),
          cleanups_deferred=outer_callbacks[4] + p_callbacks[4] | 0;
         if(42 < cleanups_deferred)
          var
           cleanups_deferred$0=0,
           regular_callbacks$0=clean_up_callback_cells(regular_callbacks);
         else
          var
           cleanups_deferred$0=cleanups_deferred,
           regular_callbacks$0=regular_callbacks;
         var
          _eq_=p_callbacks[2],
          _er_=outer_callbacks[2],
          cancel_callbacks=
           typeof _er_ === "number"
            ?_eq_
            :typeof _eq_ === "number"?_er_:[0,_er_,_eq_];
         outer_callbacks[1] = regular_callbacks$0;
         outer_callbacks[2] = cancel_callbacks;
         outer_callbacks[4] = cleanups_deferred$0;
         outer_callbacks[3] = p_callbacks[3];
         set_promise_state(p,[3,outer_promise]);
         return outer_promise;
        default:return resolve(_b8_,0,outer_promise,p[1])}}
    function symbol_bind(p,f)
     {var p$0=underlying(p);
      function create_result_promise_and_call(param)
       {var p=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var p$2=underlying(p);resolve(_b__,0,p$2,p_result);return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _ep_=caml_call1(f,v),p$0=_ep_}
          catch(exn){exn = caml_wrap_exception(exn);var p$0=fail(exn)}
          var p$1=underlying(p);
          make_into_proxy(p$1,p$0);
          return 0}
        return [0,p,callback]}
      var _en_=p$0[1];
      switch(_en_[0])
       {case 1:return [0,_en_];
        case 2:
         var
          p_callbacks=_en_[1],
          match=create_result_promise_and_call(0),
          callback=match[2],
          p$1=match[1];
         add_implicitly_removed_callbac(p_callbacks,callback);
         return p$1;
        default:
         var
          v=_en_[1],
          _eo_=
           function(param)
            {var
              match=create_result_promise_and_call(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_b$_,function(param){return caml_call1(f,v)},_eo_)}}
    function catch$0(f,h)
     {try
       {var _el_=caml_call1(f,0),p=_el_}
      catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
      var p$0=underlying(p);
      function create_result_promise_and_call(param)
       {var p=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1];
            current_storage[1] = saved_storage;
            try
             {var _em_=caml_call1(h,exn),p$1=_em_}
            catch(exn){exn = caml_wrap_exception(exn);var p$1=fail(exn)}
            var p$2=underlying(p);
            make_into_proxy(p$2,p$1);
            return 0}
          var p$0=underlying(p);
          resolve(_cd_,0,p$0,p_result);
          return 0}
        return [0,p,callback]}
      var _ej_=p$0[1];
      switch(_ej_[0])
       {case 1:
         var
          exn=_ej_[1],
          _ek_=
           function(param)
            {var
              match=create_result_promise_and_call(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_ce_,function(param){return caml_call1(h,exn)},_ek_);
        case 2:
         var
          p_callbacks=_ej_[1],
          match=create_result_promise_and_call(0),
          callback=match[2],
          p$1=match[1];
         add_implicitly_removed_callbac(p_callbacks,callback);
         return p$1;
        default:return p$0}}
    function on_cancel(p,f)
     {var p$0=underlying(p),_eh_=p$0[1];
      switch(_eh_[0])
       {case 1:
         if(_eh_[1] === Canceled)
          {var
            _ei_=
             function(param)
              {return [0,
                       0,
                       function(param){return handle_with_async_exception_ho(f,0)},
                       _cf_]};
           return run_callback_or_defer_it
                   (_cg_,
                    function(param){return handle_with_async_exception_ho(f,0)},
                    _ei_)}
         return 0;
        case 2:
         var
          callbacks=_eh_[1],
          node=[1,current_storage[1],f],
          node$0=typeof callbacks[2] === "number"?node:[0,node,callbacks[2]];
         callbacks[2] = node$0;
         return 0;
        default:return 0}}
    var pause_hook=[0,function(_eg_){return 0}],s1=create$0(0),_ch_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_ch_[1] = 0;return 0}
      var seq=create$0(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _ch_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _ef_=curr !== seq?1:0;
        if(_ef_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _ef_}}
    function symbol(p$1,f)
     {var p=underlying(p$1);
      function create_result_promise_and_call(param)
       {var p$0=new_pending([0,p]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var p$1=underlying(p$0);resolve(_cb_,0,p$1,p_result);return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _ee_=[0,caml_call1(f,v)],p_result$0=_ee_}
          catch(exn){exn = caml_wrap_exception(exn);var p_result$0=[1,exn]}
          var p=underlying(p$0);
          resolve(_ca_,0,p,p_result$0);
          return 0}
        return [0,p$0,callback]}
      var _ea_=p[1];
      switch(_ea_[0])
       {case 1:return [0,_ea_];
        case 2:
         var
          p_callbacks=_ea_[1],
          match=create_result_promise_and_call(0),
          callback=match[2],
          p$0=match[1];
         add_implicitly_removed_callbac(p_callbacks,callback);
         return p$0;
        default:
         var
          v=_ea_[1],
          _eb_=
           function(param)
            {var
              match=create_result_promise_and_call(0),
              callback=match[2],
              p$0=match[1];
             return [0,p$0,callback,p[1]]};
         return run_callback_or_defer_it
                 (_cc_,
                  function(param)
                   {try
                     {var _ed_=[0,caml_call1(f,v)],_ec_=_ed_}
                    catch(exn){exn = caml_wrap_exception(exn);var _ec_=[1,exn]}
                    return [0,_ec_]},
                  _eb_)}}
    var Wrong_headers=[248,_ci_,caml_fresh_oo_id(0)];
    function f(param)
     {if(1 === param)
       {var t0=caml_js_wrap_callback(wakeup_paused);
        t141.setTimeout(t0,0.);
        return 0}
      return 0}
    pause_hook[1] = f;
    function prerr_string$0(s)
     {var t3$0=caml_jsstring_of_string(s);return t3.log(t3$0)}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_ck_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    function error(f)
     {return ksprintf
              (function(s)
                {var t0=caml_jsstring_of_string(s);
                 t3.error(t0);
                 return failwith(s)},
               f)}
    function debug(f)
     {return ksprintf
              (function(s)
                {var t2=caml_jsstring_of_string(s);return t3.log(t2)},
               f)}
    function check_error(gl)
     {var _d__=gl.NO_ERROR,_d$_=caml_notequal(gl.getError(),_d__);
      return _d$_?error(_cl_):_d$_}
    function init_canvas(canvas_id)
     {function _d5_(param){return caml_call1(error(_cm_),canvas_id)}
      var
       canvas$0=
        get
         (bind(t48.getElementById(caml_jsstring_of_string(canvas_id)),canvas),
          _d5_);
      function _d6_(param)
       {return ksprintf
                (function(s)
                  {var t4=caml_jsstring_of_string(s);
                   t141.alert(t4);
                   return failwith(s)},
                 f$0)}
      try {var _d8_=getContext(canvas$0),_d7_=_d8_}catch(_d9_){var _d7_=t58}
      var gl=get(_d7_,_d6_);
      return [0,canvas$0,gl]}
    function load_shader(gl,shader,text)
     {gl.shaderSource(shader,text);
      gl.compileShader(shader);
      var
       t17=gl.COMPILE_STATUS,
       _d2_=1 - (gl.getShaderParameter(shader,t17) | 0);
      if(_d2_)
       {var
         _d3_=caml_string_of_jsstring(gl.getShaderInfoLog(shader)),
         _d4_=caml_string_of_jsstring(text);
        return caml_call2(error(_cn_),_d4_,_d3_)}
      return _d2_}
    function get_source(src_id)
     {function _d1_(param){return caml_call1(error(_cp_),src_id)}
      var
       t40=caml_jsstring_of_string(src_id),
       t42=get(bind(t48.getElementById(t40),script),_d1_);
      return t42.text}
    function float32array(a)
     {var
       t43=a.length - 1,
       array=new t44(t43),
       _dZ_=a.length - 1 - 1 | 0,
       _dY_=0;
      if(! (_dZ_ < 0))
       {var i=_dY_;
        for(;;)
         {var v=a[1 + i];
          array[i] = v;
          var _d0_=i + 1 | 0;
          if(_dZ_ !== i){var i=_d0_;continue}
          break}}
      return array}
    function c(i,j){return (i * 4 | 0) + j | 0}
    function mult(m1,m2)
     {function v(p)
       {var
         j=p % 4 | 0,
         i=p / 4 | 0,
         _dR_=caml_array_get(m2,c(3,j)),
         _dS_=caml_array_get(m1,c(i,3)) * _dR_,
         _dT_=caml_array_get(m2,c(2,j)),
         _dU_=caml_array_get(m1,c(i,2)) * _dT_,
         _dV_=caml_array_get(m2,c(1,j)),
         _dW_=caml_array_get(m1,c(i,1)) * _dV_,
         _dX_=caml_array_get(m2,c(0,j));
        return caml_array_get(m1,c(i,0)) * _dX_ + _dW_ + _dU_ + _dS_}
      return init(16,v)}
    var line_regexp=regexp(_cq_),couple_regexp=regexp(_cr_);
    function read_coord_couple(c)
     {var match=string_match(couple_regexp,c,0);
      if(match)
       {var
         res=match[1],
         match$0=map(function(_dQ_){return matched_group(res,_dQ_)},_cs_);
        if(match$0)
         {var _dM_=match$0[1];
          if(_dM_)
           {var _dN_=match$0[2];
            if(_dN_)
             {var _dO_=_dN_[1];
              if(_dO_ && ! _dN_[2])
               {var vn=_dO_[1],v=_dM_[1],_dP_=caml_int_of_string(vn);
                return [0,[0,caml_int_of_string(v),_dP_]]}}}}
        return 0}
      return 0}
    function concat(a)
     {var r=[0,0],_dG_=a.length - 1 - 1 | 0,_dF_=0;
      if(! (_dG_ < 0))
       {var i=_dF_;
        a:
        for(;;)
         {var l=a[1 + i],len=0,param=l,_dI_=r[1];
          for(;;)
           {if(param)
             {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
              continue}
            r[1] = _dI_ + len | 0;
            var _dJ_=i + 1 | 0;
            if(_dG_ !== i){var i=_dJ_;continue a}
            break}
          break}}
      var pos=[0,-1],l$0=[0,0],_dH_=r[1];
      function next(param)
       {for(;;)
         {var _dK_=l$0[1];
          if(_dK_){var q=_dK_[2],t=_dK_[1];l$0[1] = q;return t}
          pos[1]++;
          var _dL_=pos[1];
          l$0[1] = caml_check_bound(a,_dL_)[1 + _dL_];
          continue}}
      return init(_dH_,next)}
    function http_get(url)
     {function _dy_(r)
       {var cod=r[2],msg=r[4];
        if(0 !== cod && 200 !== cod){var p=new_pending(0);return p}
        return return$0(msg)}
      var
       match=task(0),
       w=match[2],
       res=match[1],
       t26=caml_xmlhttprequest_create(0),
       t10=caml_jsstring_of_string(url),
       t9="GET";
      t26.open(t9,t10,t11);
      t26.responseType = "";
      var content_type$0=0,sth=0;
      if(0)
       {var
         content_type=content_type$0[1],
         t30=caml_jsstring_of_string(content_type);
        t26.setRequestHeader("Content-type",t30)}
      var param=sth;
      for(;;)
       {if(param)
         {var
           l=param[2],
           a=param[1],
           v=a[2],
           n=a[1],
           t33=caml_jsstring_of_string(v),
           t32=caml_jsstring_of_string(n);
          t26.setRequestHeader(t32,t33);
          var param=l;
          continue}
        var
         headers=
          function(s)
           {function _dD_(v){return [0,caml_string_of_jsstring(v)]}
            var t35=caml_jsbytes_of_string(s);
            function _dE_(param){return 0}
            return case$0(t26.getResponseHeader(t35),_dE_,_dD_)},
         st=[0,382334108],
         do_check_headers=
          function(param)
           {if(382334108 === st[1])
             if(1)
              st[1] = 583419792;
             else
              {var exn=[0,Wrong_headers,[0,t26.status,headers]];
               wakeup_general(_b7_,w,[1,exn]);
               st[1] = 479410653;
               t26.abort()}
            return 479410653 !== st[1]?1:0},
         t47=
          caml_js_wrap_callback
           (function(param)
             {var match=t26.readyState;
              switch(match)
               {case 2:if(! onIE){do_check_headers(0);return 0}break;
                case 3:if(onIE){do_check_headers(0);return 0}break;
                case 4:
                 var _dC_=do_check_headers(0);
                 if(_dC_)
                  {var
                    code=t26.status,
                    _dz_=
                     function(param)
                      {var match=to_option(t26.responseXML);
                       if(match)
                        {var doc=match[1];
                         return doc.documentElement === t58?0:[0,doc]}
                       return 0},
                    _dA_=function(x){return caml_string_of_jsstring(x)},
                    _dB_=function(param){return _cj_},
                    response=
                     [0,url,code,headers,case$0(t26.responseText,_dB_,_dA_),_dz_];
                   return wakeup(w,response)}
                 return _dC_
                }
              return 0});
        t26.onreadystatechange = t47;
        var x=t26.upload;
        x !== t39;
        t26.send(t58);
        on_cancel(res,function(param){return t26.abort()});
        return symbol_bind(res,_dy_)}}
    function getfile(f)
     {try
       {var _dw_=return$0(caml_read_file_content(f));return _dw_}
      catch(_dx_)
       {_dx_ = caml_wrap_exception(_dx_);
        if(_dx_ === Not_found)
         {var _dv_=function(s){return s};return symbol(http_get(f),_dv_)}
        throw _dx_}}
    function start(param)
     {var
       norm=param[2],
       pos=param[1],
       t139=t48.createTextNode("loading"),
       span=bind(t48.getElementById("fps"),element);
      if(1 - (span == t58?1:0))span.appendChild(t139);
      debug(_cy_);
      var match=init_canvas(_cz_),gl=match[2];
      debug(_cA_);
      var
       frag_src=get_source(_cB_),
       vert_src=get_source(_cC_),
       t22=gl.VERTEX_SHADER,
       t29=gl.createShader(t22),
       t25=gl.FRAGMENT_SHADER,
       t32=gl.createShader(t25);
      load_shader(gl,t29,vert_src);
      load_shader(gl,t32,frag_src);
      var t96=gl.createProgram();
      gl.attachShader(t96,t29);
      gl.attachShader(t96,t32);
      gl.linkProgram(t96);
      var t38=gl.LINK_STATUS;
      if(1 - (gl.getProgramParameter(t96,t38) | 0))error(_co_);
      debug(_cD_);
      gl.useProgram(t96);
      check_error(gl);
      debug(_cE_);
      var t52=gl.DEPTH_TEST;
      gl.enable(t52);
      var t55=gl.LESS;
      gl.depthFunc(t55);
      var
       t124=gl.getUniformLocation(t96,"u_proj"),
       t66=gl.getUniformLocation(t96,"u_lightPos"),
       t69=gl.getUniformLocation(t96,"u_ambientLight"),
       t67=float32array([254,3.,0.,-1.]),
       t70=float32array([254,0.1,0.1,0.1]);
      gl.uniform3fv(t66,t67);
      gl.uniform3fv(t69,t70);
      var t89=gl.getAttribLocation(t96,"a_position");
      gl.enableVertexAttribArray(t89);
      var t80=gl.createBuffer(),t79=gl.ARRAY_BUFFER;
      gl.bindBuffer(t79,t80);
      var t86=gl.STATIC_DRAW,t84=gl.ARRAY_BUFFER;
      gl.bufferData(t84,pos,t86);
      var t91=gl.FLOAT;
      gl.vertexAttribPointer(t89,3,t91,t125,0,0);
      var t113=gl.getAttribLocation(t96,"a_normal");
      gl.enableVertexAttribArray(t113);
      var t104=gl.createBuffer(),t103=gl.ARRAY_BUFFER;
      gl.bindBuffer(t103,t104);
      var t110=gl.STATIC_DRAW,t108=gl.ARRAY_BUFFER;
      gl.bufferData(t108,norm,t110);
      var t115=gl.FLOAT;
      gl.vertexAttribPointer(t113,3,t115,t125,0,0);
      var
       mat=
        mult
         ([254,
           1.,
           0.,
           0.,
           0.,
           0.,
           6.12323399573676604e-17,
           1.,
           0.,
           0.,
           -1.,
           6.12323399573676604e-17,
           0.,
           0.,
           0.,
           0.,
           1.],
          mult
           ([254,0.5,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.5,0.,0.,0.,0.,1.],
            [254,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.]));
      check_error(gl);
      debug(_cF_);
      function get_time(param){var t121=new t122();return t121.getTime()}
      var last_draw=[0,get_time(0)],q=create(0);
      function f(param)
       {var
         t123=new t122(),
         t$0=t123.getTime() / 1000.,
         t$1=1. * t$0,
         m=
          mult
           (mat,
            [254,
             Math.cos(t$1),
             0.,
             - Math.sin(t$1),
             0.,
             0.,
             1.,
             0.,
             0.,
             Math.sin(t$1),
             0.,
             Math.cos(t$1),
             0.,
             0.,
             0.,
             0.,
             1.]),
         t126=float32array(m);
        gl.uniformMatrix4fv(t124,t125,t126);
        var t130=gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT;
        gl.clear(t130);
        var t136=pos.length / 3 | 0,t134=gl.TRIANGLES;
        gl.drawArrays(t134,0,t136);
        check_error(gl);
        var now=get_time(0);
        add(now - last_draw[1],q);
        last_draw[1] = now;
        if(50 < q[1])take(q);
        var accu=0.,cell=q[2],_dr_=q[1];
        for(;;)
         {if(cell)
           {var
             content=cell[1],
             next=cell[2],
             accu$0=accu + content,
             accu=accu$0,
             cell=next;
            continue}
          var
           fps=1. / accu * _dr_ * 1000.,
           t138=caml_jsstring_of_string(caml_call1(sprintf(_cG_),fps));
          t139.data = t138;
          var
           match=task(0),
           w=match[2],
           t=match[1],
           d=20.,
           callback=function(_du_){return wakeup(w,_du_)},
           id=[0,0],
           loop=
            function(step,param)
             {if(2147483000. < step)
               var remain=step - 2147483000.,step$0=overflow_limit;
              else
               var remain=0.,step$0=step;
              var
               cb=
                remain == 0.?callback:function(_dt_){return loop(remain,_dt_)},
               t125=caml_js_wrap_callback(cb);
              id[1] = [0,t141.setTimeout(t125,step$0)];
              return 0};
          loop(d,0);
          on_cancel
           (t,
            function(param)
             {var _ds_=id[1];
              if(_ds_){var x=_ds_[1];id[1] = 0;return t141.clearTimeout(x)}
              return 0});
          return symbol_bind(t,f)}}
      return f(0)}
    function f$1(param)
     {debug(_cH_);
      function _cK_(exn)
       {var _dq_=to_string(exn);return caml_call1(error(_cI_),_dq_)}
      catch$0
       (function(param)
         {function _cL_(s$0)
           {var r=regexp(_cx_);
            r.lastIndex = 0;
            var
             t42=caml_jsbytes_of_string(s$0),
             a=t42.split(r),
             idx$1=a.length - 1 | 0,
             accu=0,
             idx=idx$1;
            for(;;)
             {if(idx < 0)
               {var
                 a$3=of_list(accu),
                 vertex$1=[0,0],
                 norm$1=[0,0],
                 face=[0,0],
                 _cN_=a$3.length - 1 - 1 | 0,
                 _cM_=0;
                if(! (_cN_ < 0))
                 {var i=_cM_;
                  for(;;)
                   {var s=a$3[1 + i],match=string_match(line_regexp,s,0);
                    if(match)
                     {var
                       res=match[1],
                       match$0=
                        map
                         (function(res)
                            {return function(_dp_){return matched_group(res,_dp_)}}
                           (res),
                          _ct_),
                       switch$0=0;
                      if(match$0)
                       {var _cP_=match$0[1];
                        if(_cP_)
                         {var _cQ_=_cP_[1];
                          if(caml_string_notequal(_cQ_,_cu_))
                           if(caml_string_notequal(_cQ_,_cv_))
                            {if(! caml_string_notequal(_cQ_,_cw_))
                              {var _cR_=match$0[2];
                               if(_cR_)
                                {var _cS_=_cR_[1];
                                 if(_cS_)
                                  {var _cT_=_cR_[2];
                                   if(_cT_)
                                    {var _cU_=_cT_[1];
                                     if(_cU_)
                                      {var _cV_=_cT_[2];
                                       if(_cV_)
                                        {var _cW_=_cV_[1];
                                         if(_cW_ && ! _cV_[2])
                                          {var
                                            z=_cW_[1],
                                            y=_cU_[1],
                                            x$0=_cS_[1],
                                            _cX_=caml_float_of_string(z),
                                            _cY_=caml_float_of_string(y),
                                            match$2=[0,[1,[0,caml_float_of_string(x$0),_cY_,_cX_]]];
                                           switch$0 = 1}}}}}}}}
                           else
                            {var _cZ_=match$0[2];
                             if(_cZ_)
                              {var _c0_=_cZ_[1];
                               if(_c0_)
                                {var _c1_=_cZ_[2];
                                 if(_c1_)
                                  {var _c2_=_c1_[1];
                                   if(_c2_)
                                    {var _c3_=_c1_[2];
                                     if(_c3_)
                                      {var _c4_=_c3_[1];
                                       if(_c4_ && ! _c3_[2])
                                        {var
                                          z$0=_c4_[1],
                                          y$0=_c2_[1],
                                          x$1=_c0_[1],
                                          _c5_=caml_float_of_string(z$0),
                                          _c6_=caml_float_of_string(y$0),
                                          match$2=[0,[0,[0,caml_float_of_string(x$1),_c6_,_c5_]]];
                                         switch$0 = 1}}}}}}}
                          else
                           {var _c7_=match$0[2];
                            if(_c7_)
                             {var _c8_=_c7_[1];
                              if(_c8_)
                               {var _c9_=_c7_[2];
                                if(_c9_)
                                 {var _c__=_c9_[1];
                                  if(_c__)
                                   {var _c$_=_c9_[2];
                                    if(_c$_)
                                     {var _da_=_c$_[1];
                                      if(_da_ && ! _c$_[2])
                                       {var
                                         z$1=_da_[1],
                                         y$1=_c__[1],
                                         x$2=_c8_[1],
                                         match$1=map(read_coord_couple,[0,x$2,[0,y$1,[0,z$1,0]]]),
                                         switch$1=0;
                                        if(match$1)
                                         {var _db_=match$1[1];
                                          if(_db_)
                                           {var _dc_=match$1[2];
                                            if(_dc_)
                                             {var _dd_=_dc_[1];
                                              if(_dd_)
                                               {var _de_=_dc_[2];
                                                if(_de_)
                                                 {var _df_=_de_[1];
                                                  if(_df_ && ! _de_[2])
                                                   {var
                                                     z$2=_df_[1],
                                                     y$2=_dd_[1],
                                                     x$3=_db_[1],
                                                     match$2=[0,[2,[0,x$3,y$2,z$2]]];
                                                    switch$0 = 1;
                                                    switch$1 = 1}}}}}}
                                        if(! switch$1){var match$2=0;switch$0 = 1}}}}}}}}}}
                      if(! switch$0)var match$2=0}
                    else
                     var match$2=0;
                    if(match$2)
                     {var _dg_=match$2[1];
                      switch(_dg_[0])
                       {case 0:
                         var
                          match$3=_dg_[1],
                          c=match$3[3],
                          b=match$3[2],
                          a$0=match$3[1];
                         vertex$1[1] = [0,[0,a$0,b,c],vertex$1[1]];
                         break;
                        case 1:
                         var
                          match$4=_dg_[1],
                          c$0=match$4[3],
                          b$0=match$4[2],
                          a$1=match$4[1];
                         norm$1[1] = [0,[0,a$1,b$0,c$0],norm$1[1]];
                         break;
                        default:
                         var
                          match$5=_dg_[1],
                          c$1=match$5[3],
                          b$1=match$5[2],
                          a$2=match$5[1];
                         face[1] = [0,[0,a$2,b$1,c$1],face[1]]}}
                    var _cO_=i + 1 | 0;
                    if(_cN_ !== i){var i=_cO_;continue}
                    break}}
                var
                 face$0=of_list(rev(face[1])),
                 norm$2=of_list(rev(norm$1[1])),
                 vertex$2=of_list(rev(vertex$1[1])),
                 vertex=
                  init
                   (face$0.length - 1,
                    function(i)
                     {var
                       _dl_=caml_check_bound(face$0,i)[1 + i],
                       cv=_dl_[3][1],
                       bv=_dl_[2][1],
                       match=_dl_[1],
                       av=match[1],
                       _dm_=av - 1 | 0,
                       match$0=caml_check_bound(vertex$2,_dm_)[1 + _dm_],
                       a3=match$0[3],
                       a2=match$0[2],
                       a1=match$0[1],
                       _dn_=bv - 1 | 0,
                       match$1=caml_check_bound(vertex$2,_dn_)[1 + _dn_],
                       b3=match$1[3],
                       b2=match$1[2],
                       b1=match$1[1],
                       _do_=cv - 1 | 0,
                       match$2=caml_check_bound(vertex$2,_do_)[1 + _do_],
                       c3=match$2[3],
                       c2=match$2[2],
                       c1=match$2[1];
                      return [0,
                              a1,
                              [0,a2,[0,a3,[0,b1,[0,b2,[0,b3,[0,c1,[0,c2,[0,c3,0]]]]]]]]]}),
                 norm=
                  init
                   (face$0.length - 1,
                    function(i)
                     {var
                       _dh_=caml_check_bound(face$0,i)[1 + i],
                       cn=_dh_[3][2],
                       bn=_dh_[2][2],
                       match=_dh_[1],
                       an=match[2],
                       _di_=an - 1 | 0,
                       match$0=caml_check_bound(norm$2,_di_)[1 + _di_],
                       a3=match$0[3],
                       a2=match$0[2],
                       a1=match$0[1],
                       _dj_=bn - 1 | 0,
                       match$1=caml_check_bound(norm$2,_dj_)[1 + _dj_],
                       b3=match$1[3],
                       b2=match$1[2],
                       b1=match$1[1],
                       _dk_=cn - 1 | 0,
                       match$2=caml_check_bound(norm$2,_dk_)[1 + _dk_],
                       c3=match$2[3],
                       c2=match$2[2],
                       c1=match$2[1];
                      return [0,
                              a1,
                              [0,a2,[0,a3,[0,b1,[0,b2,[0,b3,[0,c1,[0,c2,[0,c3,0]]]]]]]]]}),
                 vertex$0=float32array(concat(vertex)),
                 norm$0=float32array(concat(norm));
                return [0,vertex$0,norm$0]}
              var idx$0=idx - 1 | 0,x=a[idx];
              if(x === t39)throw [0,Assert_failure,_bQ_];
              var
               accu$0=[0,caml_string_of_jsbytes(x),accu],
               accu=accu$0,
               idx=idx$0;
              continue}}
          return symbol_bind(symbol(getfile(s$2),_cL_),start)},
        _cK_);
      return t11}
    function t140(e)
     {if(test(e))
       {var res=f$1(e);if(1 - (res | 0))e.preventDefault();return res}
      var t18=event,t17=f$1(t18);
      if(1 - (t17 | 0))t18.returnValue = t17;
      return t17}
    t141.onload = t140;
    do_at_exit(0);
    return}
  (globalThis));

//# sourceMappingURL=webgldemo.map
